<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1Q84中的哲学</title>
    <url>/2020/03/07/1Q84%20%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6/</url>
    <content><![CDATA[<ul>
<li>人被赋予希望，以此为燃料为目的度过人生。没有希望，人就活不下去。然而这和抛硬币相同。正面向上还是反面向上，只有等硬币落下来才能知道。</li>
</ul>
<a id="more"></a>

<ul>
<li><p>灯台之下最黑暗。</p>
</li>
<li><p>有光明的地方就必然有阴影，有阴影的地方就必然有光明。不存在没有光明的阴影，也不存在没有阴影的光明。</p>
</li>
<li><p>人并不是大限一到就溘然长逝的，而是先从内部缓缓地死去，最终迎来最后结算的日子。谁都逃脱不了。人必须为收下的东西支付代价。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>DeviceCheck</title>
    <url>/2020/06/05/DeviceCheck/</url>
    <content><![CDATA[<p><img src="/2020/06/05/DeviceCheck/1.png" alt></p>
<p>最近才注意 iOS 11.0 中一个新增的小框架，于是简单学习了一下，已经有前辈写的很详细了，所以~~<a href="https://www.sunyazhou.com/2017/09/30/20170930DeviceCheck/" target="_blank" rel="noopener">参考自</a></p>
<a id="more"></a>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>iOS11 苹果改动了一个比较引开发者关注的亮点</p>
<p><strong>UDID之类的写到系统 keychain 的唯一标识会随着 app 删除而删除</strong></p>
<p>这个问题在微博上已经争论好几天：iOS11新的设备唯一标识 DCDevice</p>
<h4 id="介绍-API"><a href="#介绍-API" class="headerlink" title="介绍 API"></a>介绍 API</h4><p>我们首先看看<code>DCDevice</code>类都有啥</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;DeviceCheck/DeviceCheck.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line">API_AVAILABLE(ios(<span class="number">11.0</span>), tvos(<span class="number">11.0</span>)) API_UNAVAILABLE(watchos, macos)</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DCDevice</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// The current device. </span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>) DCDevice *currentDevice;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Check if this API is supported on the current device.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isSupported, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> supported;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Generate a new device token that can be used to get/set the persistent bits for this device.This call generates a new value every time.</span></span><br><span class="line">- (<span class="keyword">void</span>)generateTokenWithCompletionHandler:(<span class="keyword">void</span>(^)(<span class="built_in">NSData</span> * _Nullable token, <span class="built_in">NSError</span> * _Nullable error))completion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure>

<p>接口简直不能再简单了 <strong>创建实例调方法</strong></p>
<h4 id="使用-API"><a href="#使用-API" class="headerlink" title="使用 API"></a>使用 API</h4><p>下面我们来看下如何使用<code>DCDevice</code></p>
<p>导入头文件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;DeviceCheck/DeviceCheck.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>check 是否支持 如果支持 的话会在回调以后返回 <code>token</code>(NSData)</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([DCDevice.currentDevice isSupported]) &#123;</span><br><span class="line">        [DCDevice.currentDevice generateTokenWithCompletionHandler:^(<span class="built_in">NSData</span> * _Nullable token, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error.description);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// upload token to APP server</span></span><br><span class="line">                <span class="built_in">NSString</span> *deviceToken = [token base64EncodedStringWithOptions:<span class="built_in">NSDataBase64EncodingEndLineWithLineFeed</span>];</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%lu %@"</span>, token.length, deviceToken);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>token 是个 2188字节(2k 多点)的二进制流,很小</p>
<h4 id="删除-重装App-如何处理"><a href="#删除-重装App-如何处理" class="headerlink" title="删除/重装App 如何处理"></a>删除/重装App 如何处理</h4><blockquote>
<p>DeviceCheck 允许你通过你的服务器与 Apple 服务器通讯，并为单个设备设置2k左右 的数据。 在设备上用 DeviceCheck API 生成一个 2字节的 token (00, 01,10,11)，然后将这个 token 发给自己的服务器，再由自己的服务器与 Apple 的 API 进行通讯，来更新或者查询该设备的值。这两字节 的数据用来追踪用户。比如。借助两个自己的数据，你可以得知用户究竟使用了该 App 多久。 该 API 可以成为：反欺诈领域： 试用7天 Uber、滴滴司机被封号后，防止重新注册账号接单 该用户是否已经领取过首次注册红包 APP防多开 因为传输的是 flag 级别的数据，并不会定位到该设备的使用者，所以相对安全。</p>
</blockquote>
<blockquote>
<p>但是对于购买了二手手机的使用场景，可能会出现一些边界情况，这个在业务中也需要考虑进去。</p>
</blockquote>
<p>引自<a href="https://github.com/ChenYilong/iOS11AdaptationTips/issues/22" target="_blank" rel="noopener">iOS11开发新特性之实用小tips</a></p>
<p>首先要明白我们 的 token 需要发给谁</p>
<ol>
<li>token 需要发送给我们自己公司的<code>server</code>做记录</li>
<li>我们公司自己的<code>server</code>去<code>Apple</code>的<code>server</code>查询<code>token</code>是否有效,从而来更新或者查询该设备值.</li>
<li>这<code>2k 左右的 token</code>不会因为设备删除 app 而删除 会一直存在苹果的 server(其实我觉得就是苹果自己去获取的设备唯一标识).</li>
</ol>
<p>那么 怎么查询和更新呢</p>
<h5 id="查询接口"><a href="#查询接口" class="headerlink" title="查询接口"></a>查询接口</h5><p><strong><a href="https://api.development.devicecheck.apple.com/v1/query_two_bits" target="_blank" rel="noopener">https://api.development.devicecheck.apple.com/v1/query_two_bits</a></strong></p>
<p>可以用终端自己模拟一下 就当作你自己是自己的服务器访问Apple 的服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i --verbose -H <span class="string">"Authorization: Bearer &lt;GeneratedJWT&gt;"</span> \</span><br><span class="line">-X POST --data-binary @ValidQueryRequest.json \ </span><br><span class="line">https://api.development.devicecheck.apple.com/v1/query_two_bits</span><br></pre></td></tr></table></figure>

<p>json 的定义如下:</p>
<table>
<thead>
<tr>
<th align="center">字段 key</th>
<th align="center">类型</th>
<th align="center">说明</th>
<th align="center">必须</th>
</tr>
</thead>
<tbody><tr>
<td align="center">device_token</td>
<td align="center">String</td>
<td align="center">设备唯一标识 token</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">transaction_id</td>
<td align="center">String</td>
<td align="center">服务器产生的一个ID</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">timestamp</td>
<td align="center">Long</td>
<td align="center">服务器生成的UTC时间戳</td>
<td align="center">是</td>
</tr>
</tbody></table>
<p>它会 返回 如下格式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"device_token"</span> : <span class="string">"wlkCDA2Hy/CfrMqVAShs1BAR/0sAiuRIUm5jQg0a..."</span>,</span><br><span class="line">   <span class="attr">"transaction_id"</span> : <span class="string">"5b737ca6-a4c7-488e-b928-8452960c4be9"</span>,</span><br><span class="line">   <span class="attr">"timestamp"</span> : <span class="number">1487716472000</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="更新接口"><a href="#更新接口" class="headerlink" title="更新接口"></a>更新接口</h5><p><strong><a href="https://api.development.devicecheck.apple.com/v1/update_two_bits" target="_blank" rel="noopener">https://api.development.devicecheck.apple.com/v1/update_two_bits</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i --verbose -H <span class="string">"Authorization: Bearer &lt;GeneratedJWT&gt;"</span> \</span><br><span class="line">-X POST --data-binary @ValidUpdateRequest.json \</span><br><span class="line">https://api.development.devicecheck.apple.com/v1/update_two_bits</span><br></pre></td></tr></table></figure>

<p>json 的定义如下:</p>
<table>
<thead>
<tr>
<th align="center">字段 key</th>
<th align="center">类型</th>
<th align="center">说明</th>
<th align="center">必须</th>
</tr>
</thead>
<tbody><tr>
<td align="center">device_token</td>
<td align="center">String</td>
<td align="center">设备唯一标识 token</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">transaction_id</td>
<td align="center">String</td>
<td align="center">服务器产生的一个ID</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">timestamp</td>
<td align="center">Long</td>
<td align="center">服务器生成的UTC时间戳</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">bit0</td>
<td align="center">Boolean</td>
<td align="center">新的布尔值1</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">bit1</td>
<td align="center">Boolean</td>
<td align="center">新的布尔值2</td>
<td align="center">否</td>
</tr>
</tbody></table>
<p>json 的示例:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"device_token"</span> : <span class="string">"wlkCDA2Hy/CfrMqVAShs1BAR/0sAiuRIUm5jQg0a..."</span>,</span><br><span class="line">   <span class="attr">"transaction_id"</span> : <span class="string">"5b737ca6-a4c7-488e-b928-8452960c4be9"</span>,</span><br><span class="line">   <span class="attr">"timestamp"</span> : <span class="number">1487716472000</span>,</span><br><span class="line">   <span class="attr">"bit0"</span> : <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"bit1"</span> : <span class="literal">false</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最终的方案"><a href="#最终的方案" class="headerlink" title="最终的方案"></a>最终的方案</h3><ol>
<li>iOS11以前版本暂且才用 UUID 等 keychian 方式</li>
<li>iOS11尽量才用新的 api 来适配解决</li>
</ol>
<p>对于 server 来讲可以 把 token 搞成新的附属字段 比如一个账号下登录多少个设备</p>
<p>那么 一个 UID 下面 就要附属 iOS 版本+ token</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Pages 404</title>
    <url>/2017/10/02/GitHub%20Pages%20404/</url>
    <content><![CDATA[<p>如何配置GitHub Pages网上资料很多，这里就不多说了，我们补充一个问题的解决方式。很多人都出会出现，Hexo项目传到 GitHub 的仓库后，访问 <code>username.github.io</code> 域名，结果是404</p>
<p>我搜集到的解决办法大概有三个，希望能帮到你：</p>
<p>​        <a id="more"></a></p>
<h4 id="1、Git-仓库的仓库名和-GitHub-Pages-的域名，按照GitHub的要求，配置成："><a href="#1、Git-仓库的仓库名和-GitHub-Pages-的域名，按照GitHub的要求，配置成：" class="headerlink" title="1、Git 仓库的仓库名和 GitHub Pages 的域名，按照GitHub的要求，配置成："></a>1、Git 仓库的仓库名和 GitHub Pages 的域名，按照GitHub的要求，配置成：</h4><p>&lt;github账号名&gt;.github.io</p>
<p>像我就是 atang1011.github.io</p>
<h4 id="2、检查-Hexo-站点的配置文件-condig-yml-中关于-Git-的设置是否有问题"><a href="#2、检查-Hexo-站点的配置文件-condig-yml-中关于-Git-的设置是否有问题" class="headerlink" title="2、检查 Hexo 站点的配置文件 _condig.yml 中关于 Git 的设置是否有问题"></a>2、检查 Hexo 站点的配置文件 _condig.yml 中关于 Git 的设置是否有问题</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:ATang1011/atang1011.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>看下 repo 和 branch 是否写错了，如果你是从网上复制的这一端配置，顺便检查一下yml 格式是不是错了，多了一个空格之类的呀，哈哈哈。</p>
<h4 id="3、缺少-index-html-文件，或者说”首页没了”，这个是我当时遇到的问题"><a href="#3、缺少-index-html-文件，或者说”首页没了”，这个是我当时遇到的问题" class="headerlink" title="3、缺少 index.html 文件，或者说”首页没了”，这个是我当时遇到的问题"></a>3、缺少 index.html 文件，或者说”首页没了”，这个是我当时遇到的问题</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在站点目录下，Git Bash 中 执行</span></span><br><span class="line">npm install hexo-generator-index --save</span><br></pre></td></tr></table></figure>

<p>之后就生成 index.html 文件了，然后重新执行上传 <code>hexo clean</code> <code>hexo g -d</code> 试试，反正我的是可以了。我是做移动端开发的，web前端着实有点迷……也都是东拼西凑的资料。</p>
<p>需要联系的，去 “关于(About)” 中找到我吧。</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo 文字中如何插入图片</title>
    <url>/2018/02/22/Hexo%E6%96%87%E5%AD%97%E4%B8%AD%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>在Hexo 的文章中加入图片，很简单的，来试试先：</p>
<a id="more"></a>

<ul>
<li><p><strong>设置站点配置_config.yml</strong>:</p>
<p>将 <code>post_asset_folder: false</code> 改为 <code>post_asset_folder: true</code></p>
</li>
<li><p><strong>安装插件</strong>:</p>
<p> <code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></p>
</li>
<li><p><strong>运行</strong>:</p>
<p> <code>hexo n &quot;XXXXXX&quot;</code></p>
<p>生成 XXXXX.md 博文时就会在 <code>/source/_posts</code> 目录下生成 XXXXXX 的文件夹，将你想在XXXXX文章中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p>
</li>
<li><p><strong>添加图片</strong>:</p>
<p>在想添加的位置写入<code>![](图片名字.图片格式)</code>，例如<code>![](1.png)</code></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Mac 下 IDEA 无法启动的问题</title>
    <url>/2019/01/24/Mac%E4%B8%8BIDEA%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>要使用IDEA，突然提示打不开，不要慌，问题不大，按照下面的步骤试试先？</p>
<blockquote>
<p>打开finder-&gt;应用程序-&gt;idea.app-&gt;右键-&gt;显示包内容-&gt;然后MaxOS-&gt;双击shell脚本（idea）</p>
</blockquote>
<a id="more"></a>

<p>这样是通过命令行的方式来启动IDEA。<br>仔细看里面的提示，尤其Error开头的信息，应该会有具体原因。</p>
<p>我的IDEA 使用的“破解版”……you know？ 然后<code>JetbrainsCrack-3.1-release-enc.jar</code> 被我不小心删了，放回原位就好了……</p>
]]></content>
  </entry>
  <entry>
    <title>Inferred (Constraints) 和 Autoresizing Mask</title>
    <url>/2021/01/07/Inferred-Constraints-%E5%92%8C-Autoresizing-Mask/</url>
    <content><![CDATA[<p>很久没有写过UI了，前一阵更新完 Xcode 12.2 和 iOS 14.* 后，老项目和新项目都需要调整点页面布局的问题。在 Copy 或者 新建 View 后，切换使用的设备时布局没有自适应。以为约束没加上，但当我要去加约束的时候，发现已经无法操作了？！！！</p>
<h5 id="乌龙"><a href="#乌龙" class="headerlink" title="乌龙"></a>乌龙</h5><p>可用与不可用：</p>
<p>​        <a id="more"></a></p>
<center>
    <div style="display:inline-block;"><img src="/2021/01/07/Inferred-Constraints-%E5%92%8C-Autoresizing-Mask/2.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="/2021/01/07/Inferred-Constraints-%E5%92%8C-Autoresizing-Mask/1.png" class width="300"></div>
</center>

<p>吓死我了，CV 大法居然都不好使了？！！！！！</p>
<p>对比了一下两个 View 的设置以后，发现是 Layout 选项不同的原因，<code>Inferred (Constraints)</code> 和 <code>Autoresizing Mask</code> 。</p>
<center>
    <div style="display:inline-block;"><img src="/2021/01/07/Inferred-Constraints-%E5%92%8C-Autoresizing-Mask/3.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="/2021/01/07/Inferred-Constraints-%E5%92%8C-Autoresizing-Mask/4.png" class width="300"></div>
</center>

<p>新页面自动使用 <code>Autoresizing Mask</code> ，不清楚是不是 Xcode 12.* 的bug，我记得 <code>Autoresizing Mask</code>  早些时候就不怎么用了，居然又出来了，还是很有意思的。</p>
<h5 id="PS-有兴趣可以看看这两个讨论"><a href="#PS-有兴趣可以看看这两个讨论" class="headerlink" title="PS: 有兴趣可以看看这两个讨论"></a>PS: 有兴趣可以看看这两个讨论</h5><p><a href="https://developer.apple.com/forums/thread/669586" target="_blank" rel="noopener">Constraint Layout No Longer Available</a></p>
<p><a href="https://dev.classmethod.jp/articles/new-auto-layout-feature/" target="_blank" rel="noopener">[iOS 10] Auto Layout の新機能について</a></p>
<h5 id="PPS-Hexo-里图片并排原来可以这样写……"><a href="#PPS-Hexo-里图片并排原来可以这样写……" class="headerlink" title="PPS:  Hexo 里图片并排原来可以这样写……"></a>PPS:  Hexo 里图片并排原来可以这样写……</h5><p><a href="https://blog.ahao.moe/posts/Hexo_multiple_images_side_by_side.html" target="_blank" rel="noopener">参考自</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline-block;"</span>&gt;</span>&#123;%img /img/1.png 300%&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline-block;margin-left:10px;"</span>&gt;</span>&#123;%img /img/2.png 300%&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>WKWebView 小结儿</title>
    <url>/2020/12/01/WKWebView%20%E5%B0%8F%E7%BB%93%E5%84%BF/</url>
    <content><![CDATA[<p>最近多个项目里因为手机 App 中 UIWebview 加载 前端页面 时的性能问题，被”围攻”了两天。本来还想偷个懒儿，不升级，毕竟 App 不需要上线 AppStore，最终还是没逃过 WKWebView 渲染速度的诱惑，真香<del>~</del>啪啪。。</p>
<p>换他丫的！</p>
<p>说来也惭愧，iOS 8.0 就开始支持 WebKit 了，一直没沉下心来学习，我们一起好好看看里面都有什么吧🤓</p>
<a id="more"></a>

<h3 id="一、WKWebView-初始化"><a href="#一、WKWebView-初始化" class="headerlink" title="一、WKWebView 初始化"></a>一、WKWebView 初始化</h3><p>一个简单用于展示的 WebView 可以是这样的：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line"><span class="built_in">WKWebView</span> *webView = (&#123;</span><br><span class="line">    webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds configuration:configuration];</span><br><span class="line">    webView.scrollView.bounces = <span class="literal">NO</span>;</span><br><span class="line">    webView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    webView;</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">[<span class="keyword">self</span>.view addSubview:webView];</span><br><span class="line">[webView loadRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://baidu.com"</span>]]];</span><br></pre></td></tr></table></figure>

<p>这样一个单纯用于展示网页、没有任何配置项的 WebView 就算完成了。相较于 <code>UIWebView</code> ，我们看到多了一个 </p>
<p><code>configuration</code>配置类型，那我们就来 Read the fucking source code……</p>
<h3 id="二、WKWebViewConfiguration"><a href="#二、WKWebViewConfiguration" class="headerlink" title="二、WKWebViewConfiguration"></a>二、WKWebViewConfiguration</h3><p>官方文档是这样描述这个类型的：</p>
<blockquote>
<p>A <code>WKWebViewConfiguration</code> object is a collection of properties with which to initialize a web view.</p>
<p>一个用于初始化 web view 属性的集合。</p>
</blockquote>
<p>我们可以用它做什么呢？</p>
<blockquote>
<ul>
<li>设置用于网站的初始cookie</li>
<li>处理自定义的 URL schemes</li>
<li>设置如何处理媒体内容</li>
<li>管理网页中选中的信息</li>
<li>自定义注入网页的脚本</li>
<li>自定义内容的展示规则</li>
<li>……</li>
</ul>
</blockquote>
<p>我们可以通过创建一个 <code>WKWebViewConfiguration</code> 对象来设置网页的属性，并且在 WebView 初始化的时候传递给它。注意的是只能在初始化的时候配置 <code>configuration</code>  中的属性，后面是没办法动态再去修改这些配置的。</p>
<p>我们通过这个类看看 WebKit 里面有哪些主要的内容：</p>
<h4 id="WKProcessPool"><a href="#WKProcessPool" class="headerlink" title="WKProcessPool"></a>WKProcessPool</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! @abstract The process pool from which to obtain the view's web content</span></span><br><span class="line"><span class="comment"> process.</span></span><br><span class="line"><span class="comment"> @discussion When a web view is initialized, a new web content process</span></span><br><span class="line"><span class="comment"> will be created for it from the specified pool, or an existing process in</span></span><br><span class="line"><span class="comment"> that pool will be used.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">WKProcessPool</span> *processPool;</span><br></pre></td></tr></table></figure>

<p>官方文档解释为 一个可以在单个进程中运行多个 web 视图的不可见 token ？令牌？。进程池。</p>
<p>对于 WK，和我们的 App 不再是同一个进程，而是开辟了独立的进程来管理，放在进程池中。这也是与<code>UIWebView</code> 最大不同的一点：<code>NSHTTPCookieStorage</code> 中的 cookie ，<code>UIWebView</code> 是可以自动携带使用的，但 <code>WKWebView</code> 无法获取 Storage 中的 cookie。</p>
<p>诶，那是不是放在同一个进程池中的 web view 就可以共享 cookie 了呢？带着这个问题，稍后我们会提到 cookie 有关的处理。</p>
<h4 id="WKPreferences"><a href="#WKPreferences" class="headerlink" title="WKPreferences"></a>WKPreferences</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! @abstract The preference settings to be used by the web view.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">WKPreferences</span> *preferences;</span><br></pre></td></tr></table></figure>

<p>针对 web 视图的偏好设置，如果是针对 web 内容的设置还是使用  <code>WKWebViewConfiguration</code> ，感觉这个类还在完善、扩充中，内容很少。比较值得注意的是与 JavaScript 有关的两个属性。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字体</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> minimumFontSize;</span><br><span class="line"><span class="comment">//是否允许在没有用户交互的情况下，JavaScript可以打开windows</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> javaScriptCanOpenWindowsAutomatically;</span><br><span class="line"><span class="comment">//是否启用javaScript，14.0 以后就废弃了，有对应替换的 API</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> javaScriptEnabled;<span class="comment">//ios(8.0, 14.0)</span></span><br><span class="line"><span class="comment">//是否提醒 如网络钓鱼或恶意软件 等可疑的欺诈内容</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> fraudulentWebsiteWarningEnabled;<span class="comment">//ios(13.0)</span></span><br></pre></td></tr></table></figure>

<h4 id="WKUserContentController"><a href="#WKUserContentController" class="headerlink" title="WKUserContentController"></a>WKUserContentController</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! @abstract The user content controller to associate with the web view.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">WKUserContentController</span> *userContentController;</span><br></pre></td></tr></table></figure>

<p>这个类提供了一个 JavaScript 向 web view 发送消息的途径，可以增删用户脚本。</p>
<p>JavaScript 与 原生做交互，比较多的一个场景是需要调用原生的某些能力。在 <code>UIWebView</code> 中简单的方式是拦截请求，根据特定的 scheme 或者 参数来区分，那在 <code>WKWebView</code> 中则是通过 <code>WKUserContentController</code> 添加消息处理器。例如打开相机功能：</p>
<ul>
<li>添加脚本处理器</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">WKUserContentController</span> *userContentController = [[<span class="built_in">WKUserContentController</span> alloc] init];</span><br><span class="line">[userContentController addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"OpenCamera"</span>];</span><br><span class="line"><span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line">configuration.userContentController = userContentController;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现 WKScriptMessageHandler 代理的方法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - WKScriptMessageHandler</span></span><br><span class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message &#123;</span><br><span class="line">    <span class="keyword">if</span> ([message.name caseInsensitiveCompare:<span class="string">@"OpenCamera"</span>] == <span class="built_in">NSOrderedSame</span>) &#123;</span><br><span class="line">        <span class="comment">//Call your open camera action.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们看到接收 JavaScript 的消息是通过一个 <code>WKScriptMessage</code> 类型，我们再来简单看下这个类</p>
<h4 id="WKScriptMessage"><a href="#WKScriptMessage" class="headerlink" title="WKScriptMessage"></a>WKScriptMessage</h4><blockquote>
<p>A WKScriptMessage object contains information about a message sent from a webpage.</p>
</blockquote>
<p>他的注释就很简单了：一个包含网页发来的消息内容的对象。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消息体、参数。允许的类型 NSNumber, NSString, NSDate, NSArray, NSDictionary, and NSNull.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="keyword">id</span> body;</span><br><span class="line"><span class="comment">// 发送消息的 web view。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">weak</span>) <span class="built_in">WKWebView</span> *webView;</span><br><span class="line"><span class="comment">// 前端中发送消息的 frame。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">WKFrameInfo</span> *frameInfo;</span><br><span class="line"><span class="comment">// 用于接收前端消息的处理器的名字。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="comment">// The content world from which the message was sent. ？我也还没用过不清楚是干嘛的。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">WKContentWorld</span> *world API_AVAILABLE(macos(<span class="number">11.0</span>), ios(<span class="number">14.0</span>));</span><br></pre></td></tr></table></figure>

<h4 id="WKWebsiteDataStore"><a href="#WKWebsiteDataStore" class="headerlink" title="WKWebsiteDataStore"></a>WKWebsiteDataStore</h4><p>这个类貌似包含了一个 web view 的所有数据，我看完这个类的介绍，第一感觉是，哇，我可以窥探一切了。然而，除了cookie，一毛钱都拿不到……不讲了，有兴趣自己试吧~~</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeDiskCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeOfflineWebApplicationCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeMemoryCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeLocalStorage</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeFetchCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeCookies</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeSessionStorage</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeIndexedDBDatabases</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeWebSQLDatabases</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeServiceWorkerRegistrations</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="WKHTTPCookieStore"><a href="#WKHTTPCookieStore" class="headerlink" title="WKHTTPCookieStore"></a>WKHTTPCookieStore</h4><blockquote>
<p> A WKHTTPCookieStore object allows managing the HTTP cookies associated with a particular WKWebsiteDataStore.</p>
</blockquote>
<p>用来管理与特定 <code>WKWebsiteDataStore</code> 相关联的 HTTP cookie。API 看上去很简单…获取 cookie 是异步操作，与<code>NSHTTPCookieStorage</code> 的同步操作不同，处理起来可能要注意下。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)getAllCookies:(<span class="keyword">void</span> (^)(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSHTTPCookie</span> *&gt; *))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)setCookie:(<span class="built_in">NSHTTPCookie</span> *)cookie completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="keyword">void</span>))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)deleteCookie:(<span class="built_in">NSHTTPCookie</span> *)cookie completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="keyword">void</span>))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)addObserver:(<span class="keyword">id</span>&lt;<span class="built_in">WKHTTPCookieStoreObserver</span>&gt;)observer;</span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>&lt;<span class="built_in">WKHTTPCookieStoreObserver</span>&gt;)observer;</span><br></pre></td></tr></table></figure>

<p>对应观察者的协议方法：</p>
<p>在 cookie 发生变化时，可以异步通知，但经测试是有一点延迟的，有兴趣可以测一测？</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">WKHTTPCookieStoreObserver</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="keyword">void</span>)cookiesDidChangeInCookieStore:(<span class="built_in">WKHTTPCookieStore</span> *)cookieStore;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>还没写完<del>~</del></p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Warning! PATH is not properly set up, &#39;/Users/***/.rvm/gems/ruby-2.4.0/bin&#39; is not at first place.</title>
    <url>/2018/12/27/Warning!PATH-is/</url>
    <content><![CDATA[<p>忽然有一天。。。使用 <code>cocoapods</code> 安装三方库不好使了，报了好长的错。。。</p>
<a id="more"></a>

<p>前<br>方<br>有<br>超<br>长<br>图<br>片<br>，<br>慎<br>点<br>。<br><img src="/2018/12/27/Warning!PATH-is/1.png" alt="error"></p>
<blockquote>
<p>按照里面的提示去github搜索了cocoapods使用中的问题，多数都是说，重装gem。笔者不是很懂这些，gem，ruby，cocoapods，全都更新了一遍。依旧是这个问题。</p>
</blockquote>
<p>睡了一觉醒来后，笔者认真看了看错误提示，注意到这句：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Command</span></span><br><span class="line"></span><br><span class="line">/Users/我/.rvm/gems/ruby-<span class="number">2.4</span>.<span class="number">0</span>/bin/pod install</span><br></pre></td></tr></table></figure>

<p>既然命令执行文件在这个路径下，可能是rvm出了问题，执行 <code>rvm list</code>查看ruby版本<br><img src="/2018/12/27/Warning!PATH-is/2.png" alt="rvm list"></p>
<p>注意到里面有个 <code>Warning！</code> 和几个建议的操作（做了也没用，是的，我试过了）😌</p>
<blockquote>
<p>Warning! PATH is not properly set up, ‘/Users/***/.rvm/gems/ruby-2.4.0/bin’ is not at first place.<br>仿佛是在说，ruby不在最初？首先？第一个位置？<br>总之某些东西被改了（但我真的没动）</p>
</blockquote>
<p>本人脾气暴躁，所以想着，既然动了，那就暴力还原吧，执行 <code>rvm -h</code> 查看rvm 的神操作们<br><img src="/2018/12/27/Warning!PATH-is/3.png" alt="rvm -h"></p>
<p>注意到了图中的这几个命令：<code>rvm maintenance</code> rvm 的维护？于是乎试了一下<br><code>rvm reset</code><br><code>rvm reset</code><br><code>rvm reset</code><br><code>rvm reset</code><br><code>rvm reset</code><br>重要的 事情说五遍。<br>command里并没有什么输出，仿佛秘密做了一些事情，然后再试了下 <code>pod install</code> 就👌了。<br>看到了久违的绿色，放心了。<br><img src="/2018/12/27/Warning!PATH-is/4.png" alt="绿色走一波"></p>
]]></content>
  </entry>
  <entry>
    <title>iOS13 适配注意点</title>
    <url>/2019/11/05/iOS13%20%E9%80%82%E9%85%8D%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    <content><![CDATA[<h5 id="1、KVC-获取私有属性-直接崩溃，比方说获取-SearchBar-的-TextField"><a href="#1、KVC-获取私有属性-直接崩溃，比方说获取-SearchBar-的-TextField" class="headerlink" title="1、KVC 获取私有属性 直接崩溃，比方说获取 SearchBar 的 TextField"></a>1、KVC 获取私有属性 直接崩溃，比方说获取 SearchBar 的 TextField</h5><p>​    解决方案是做版本判断 iOS13 的 searchbar 新增了一个 searchTextField 属性</p>
<h5 id="2、Segement、SearchBar的样式变了，注意一下"><a href="#2、Segement、SearchBar的样式变了，注意一下" class="headerlink" title="2、Segement、SearchBar的样式变了，注意一下"></a>2、Segement、SearchBar的样式变了，注意一下</h5><p>​    for 循环查找子视图失效，改为  searchBar.searchTextField</p>
<p>​        <a id="more"></a></p>
<h5 id="3、UIWebView-终极废弃，需要替换-WKWebView，不然-AppStore-审核是不通过的。"><a href="#3、UIWebView-终极废弃，需要替换-WKWebView，不然-AppStore-审核是不通过的。" class="headerlink" title="3、UIWebView 终极废弃，需要替换 WKWebView，不然 AppStore 审核是不通过的。"></a>3、UIWebView 终极废弃，需要替换 WKWebView，不然 AppStore 审核是不通过的。</h5><h5 id="4、黑夜模式"><a href="#4、黑夜模式" class="headerlink" title="4、黑夜模式"></a>4、黑夜模式</h5><h5 id="5、TextField：LeftView如果是图片的话-会覆盖整个-TextField-解决办法是用一个-view-包裹一下图片作为LeftView"><a href="#5、TextField：LeftView如果是图片的话-会覆盖整个-TextField-解决办法是用一个-view-包裹一下图片作为LeftView" class="headerlink" title="5、TextField：LeftView如果是图片的话 会覆盖整个 TextField 解决办法是用一个 view 包裹一下图片作为LeftView"></a>5、TextField：LeftView如果是图片的话 会覆盖整个 TextField 解决办法是用一个 view 包裹一下图片作为LeftView</h5><h5 id="6、UniversalLink"><a href="#6、UniversalLink" class="headerlink" title="6、UniversalLink"></a>6、UniversalLink</h5><h5 id="https-www-jianshu-com-p-03e6b7828307"><a href="#https-www-jianshu-com-p-03e6b7828307" class="headerlink" title="https://www.jianshu.com/p/03e6b7828307"></a><a href="https://www.jianshu.com/p/03e6b7828307" target="_blank" rel="noopener">https://www.jianshu.com/p/03e6b7828307</a></h5><p>​    微信分享强制使用。注册微信开放平台的时候 iOS的项目必须填这个。</p>
<h5 id="7、模态出的页面，需要指定对应的弹出模式"><a href="#7、模态出的页面，需要指定对应的弹出模式" class="headerlink" title="7、模态出的页面，需要指定对应的弹出模式"></a>7、模态出的页面，需要指定对应的弹出模式</h5><p>​    例如：UIModalPresentationOverFullScreen</p>
<p>​    检查图片选择器？</p>
<h5 id="8、Tabbar的文字颜色"><a href="#8、Tabbar的文字颜色" class="headerlink" title="8、Tabbar的文字颜色"></a>8、Tabbar的文字颜色</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[tabbarItem setTitleTextAttributes:@&#123;NSForegroundColorAttributeName:selectColor&#125; forState:UIControlStateSelected];</span><br></pre></td></tr></table></figure>

<p>​    此方法在 iOS 13 会有 bug，当我们 push 到下一页再次返回时 tabbar 字体颜色设置会失效。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.tabBar.tintColor = selectColor;</span><br></pre></td></tr></table></figure>

<h5 id="9、通过-NSURLSessionDataTask-下载文件流"><a href="#9、通过-NSURLSessionDataTask-下载文件流" class="headerlink" title="9、通过 NSURLSessionDataTask 下载文件流"></a>9、通过 NSURLSessionDataTask 下载文件流</h5><p>​    需要在头部指定接受的返回格式：<code>application/octet-stream</code></p>
<h5 id="10、Cocoapods"><a href="#10、Cocoapods" class="headerlink" title="10、Cocoapods"></a>10、Cocoapods</h5><p>​    升级 CocoaPods 到 1.8.4 版本</p>
<p>​    但是随即问题就来了, 执行 pod install 下载库时，出现错误</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[!] <span class="symbol">CDN:</span> trunk URL couldn<span class="string">'t be downloaded: https://cdn.cocoapods.org/all_pods_versions_a_7_5.txt, error: execution expired</span></span><br></pre></td></tr></table></figure>

<p>后来查了半天资料, 最终在 <a href="https://github.com/CocoaPods/CocoaPods/issues/9303" target="_blank" rel="noopener">github CocoaPods issues</a> 找到解决方案：在 Podfile 加上 source <code>https://github.com/CocoaPods/Specs.git</code> 不使用新版本的 CDN</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm 2 分屏切换</title>
    <url>/2020/12/14/iTerm%202%20%E5%88%86%E5%B1%8F/</url>
    <content><![CDATA[<ul>
<li><code>⌘ + d</code>:  垂直分屏</li>
<li><code>⌘ + shift + d</code>:  水平分屏</li>
<li><code>⌘ + ]</code>和<code>⌘ + [</code> ：在最近使用的分屏直接切换</li>
<li><code>⌘ + opt + 方向键</code>：切换到指定位置的分屏</li>
<li><code>⌘ + 数字</code>：切换标签页</li>
<li><code>⌘ + 方向键</code> ：按方向切换标签页</li>
<li><code>shift + ⌘ + s</code>：保存当前窗口快照</li>
<li><code>⌘ + opt + b</code>：快照回放，很有意思的功能，你可以对你的操作根据时间轴进行回放。可以拖动下方的时间轴，也可以按左右方向键。</li>
</ul>
<p>PS: 如果发现快捷键没起作用，可以看看是不是和系统或者其他软件的快捷键冲突了……</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mailcore 2 iOS  之二 SMTP</title>
    <url>/2018/12/12/mailcore2-iOS%E4%B9%8B%E4%BA%8CSMTP/</url>
    <content><![CDATA[<p>起源见 <a href="http://zhengyatian.github.io/2018/02/02/2018-02-02-mailcore-2-iOS-%E4%B9%8B%E4%B8%80-IMAP/" target="_blank" rel="noopener">mailcore2-ios  之一 IMAP</a></p>
<p>上一篇大致说了下IMAP协议中的简单使用，看到文章有人看，为了我的<code>三个</code>👨‍💻‍👨‍💻‍👨‍💻‍粉丝，那我继续更新一下，</p>
<p>希望对你们有帮助，也做个沟通交流。</p>
<ul>
<li><p>IMAP <a href="http://zhengyatian.github.io/2018/02/02/2018-02-02-mailcore-2-iOS-%E4%B9%8B%E4%B8%80-IMAP/" target="_blank" rel="noopener">mailcore2-ios  之一 IMAP</a></p>
</li>
<li><p>SMTP</p>
  <a id="more"></a>

<ul>
<li>登录/用户验证</li>
<li>创建邮件体</li>
<li>附件添加</li>
<li>发送</li>
<li>发送成功后<code>手动</code>添加到<code>“已发送”</code>文件夹</li>
</ul>
</li>
</ul>
<h5 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h5><h6 id="1、登录-用户验证"><a href="#1、登录-用户验证" class="headerlink" title="1、登录/用户验证"></a>1、登录/用户验证</h6><p>​    不论哪种协议，都需要先验证邮箱地址/服务器、密码、端口等，SMTP也一样，你也可以不验证，大不了就是发不出去邮件。。。🤓🤓🤓🤓🤓</p>
<p>创建session，都类似的</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.smtpSession.hostname = session.smtpHost;<span class="comment">//smtp.***.com</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.username = session.username;<span class="comment">//littlecat@xxx.com.cn</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.password = session.password;<span class="comment">//password</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.port     = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)session.smtpPort;<span class="comment">//25、465、587？</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.connectionType = session.smtpIsSSL ? MCOConnectionTypeTLS: MCOConnectionTypeClear;<span class="comment">//取决于你的邮件服务器是不是SSL的；</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.authType = MCOAuthTypeSASLLogin;<span class="comment">//session校验的类型，这里选的登录，其他还没搞明白(没看。。)😌</span></span><br></pre></td></tr></table></figure>

<p>校验邮箱信息</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOSMTPOperation *smtpOperation = [smtpSession loginOperation];</span><br><span class="line">[smtpOperation start:^(<span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"finished checking SMTP account."</span>);</span><br><span class="line">    <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="comment">//now ,you can send email.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"error check smtp account: %@"</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h6 id="2、创建邮件"><a href="#2、创建邮件" class="headerlink" title="2、创建邮件"></a>2、创建邮件</h6><ul>
<li>create message builder;</li>
<li>set sender(from)、receiver（to）、cc and bcc;</li>
<li>set body (html body  or  plain text body);</li>
</ul>
<p>懒得正经打字了，bite me！🙄🙄🙄🙄🙄🙄🙄🙄🙄🙄</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)messageBuildFrom:(<span class="built_in">NSString</span> *)displayName <span class="comment">// 发件人昵称，可以不设置；</span></span><br><span class="line">                 mailBox:(<span class="built_in">NSString</span> *)mail  <span class="comment">//发件人邮箱地址；</span></span><br><span class="line">                      to:(<span class="built_in">NSArray</span> *)to  <span class="comment">//收件人（邮箱地址字符串格式，下同）；</span></span><br><span class="line">                      cc:(<span class="built_in">NSArray</span> *)cc  <span class="comment">//抄送人；</span></span><br><span class="line">                     bcc:(<span class="built_in">NSArray</span> *)bcc  <span class="comment">//密送人；</span></span><br><span class="line">                 subject:(<span class="built_in">NSString</span> *)subject  <span class="comment">//邮件主题；</span></span><br><span class="line">                textBody:(<span class="built_in">NSString</span> *)body  <span class="comment">//邮件正文，我这里是带标签的html文本；</span></span><br><span class="line">                 attachs:(<span class="built_in">NSDictionary</span> *)attachs  <span class="comment">//附件s（文件名称和NSData格式数据）；</span></span><br><span class="line">                htmlBody:(MCOAbstractMessage *)msgParser  <span class="comment">//转发时的原邮件；</span></span><br><span class="line">         completeHandler:(<span class="keyword">void</span>(^)())complete</span><br><span class="line">                   error:(<span class="keyword">void</span>(^)(<span class="built_in">NSError</span> *error))fail</span><br><span class="line">&#123;</span><br><span class="line">    MCOMessageBuilder *msgBuilder = [[MCOMessageBuilder alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//header;</span></span><br><span class="line">    <span class="keyword">if</span> (displayName != <span class="literal">nil</span>) &#123;</span><br><span class="line">        msgBuilder.header.from = [MCOAddress addressWithDisplayName:displayName mailbox:mail];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        msgBuilder.header.from = [MCOAddress addressWithMailbox:mail];</span><br><span class="line">    &#125;</span><br><span class="line">    msgBuilder.header.to      = [<span class="keyword">self</span> mailStringToMCOAddress:to];<span class="comment">//字符串格式的邮箱地址，要转成address类；</span></span><br><span class="line">    msgBuilder.header.cc      = [<span class="keyword">self</span> mailStringToMCOAddress:cc];</span><br><span class="line">    msgBuilder.header.bcc     = [<span class="keyword">self</span> mailStringToMCOAddress:bcc];</span><br><span class="line">    msgBuilder.header.subject = subject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//body</span></span><br><span class="line">    [msgBuilder setHTMLBody:body];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//------见下</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)mailStringToMCOAddress:(<span class="built_in">NSArray</span> *)arr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *temp = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *str <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        MCOAddress *add = [MCOAddress addressWithMailbox:str];</span><br><span class="line">        [temp addObject:add];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp.copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3、附件处理"><a href="#3、附件处理" class="headerlink" title="3、附件处理"></a>3、附件处理</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)messageBuildFrom:(<span class="built_in">NSString</span> *)displayName</span><br><span class="line">                 mailBox:(<span class="built_in">NSString</span> *)mail</span><br><span class="line">                      to:(<span class="built_in">NSArray</span> *)to</span><br><span class="line">                      cc:(<span class="built_in">NSArray</span> *)cc</span><br><span class="line">                     bcc:(<span class="built_in">NSArray</span> *)bcc</span><br><span class="line">                 subject:(<span class="built_in">NSString</span> *)subject</span><br><span class="line">                textBody:(<span class="built_in">NSString</span> *)body</span><br><span class="line">                 attachs:(<span class="built_in">NSDictionary</span> *)attachs</span><br><span class="line">                htmlBody:(MCOAbstractMessage *)msgParser</span><br><span class="line">         completeHandler:(<span class="keyword">void</span>(^)())complete</span><br><span class="line">                   error:(<span class="keyword">void</span>(^)(<span class="built_in">NSError</span> *error))fail</span><br><span class="line">&#123;</span><br><span class="line">    MCOMessageBuilder *msgBuilder = [[MCOMessageBuilder alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------见上 。。。 ------//</span></span><br><span class="line">    <span class="keyword">if</span> (msgParser != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="comment">//附加资源，</span></span><br><span class="line">        <span class="built_in">NSArray</span> *inAttach = msgParser.htmlInlineAttachments;</span><br><span class="line">        <span class="keyword">for</span> (MCOAttachment *attach <span class="keyword">in</span> inAttach) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> * path = [<span class="built_in">NSTemporaryDirectory</span>() stringByAppendingPathComponent:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@_%@"</span>,msgParser.header.messageID,attach.filename]];</span><br><span class="line">            <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                MCOAttachment *temp = [MCOAttachment attachmentWithData:data filename:attach.filename];</span><br><span class="line">                temp.inlineAttachment = <span class="literal">YES</span>;</span><br><span class="line">                [msgBuilder addRelatedAttachment:temp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//看接口文档的意思，上面是把转发的邮件中的附件添加上，</span></span><br><span class="line">    <span class="comment">//可是并不起作用。。。采取的方法是，下面循环再添加一次。。。。🤧🤧🤧🤧🤧</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//附件</span></span><br><span class="line">    <span class="keyword">if</span> (attachs) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> *name <span class="keyword">in</span> attachs.allKeys) &#123;</span><br><span class="line">            MCOAttachment *attach = [MCOAttachment attachmentWithData:[attachs objectForKey:name] filename:name];</span><br><span class="line">            [msgBuilder addAttachment:attach];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//send</span></span><br><span class="line">    <span class="comment">//--------见下</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4、发送邮件"><a href="#4、发送邮件" class="headerlink" title="4、发送邮件"></a>4、发送邮件</h6><p>邮件也创建了，附件添加完，终于要发送了，但是要注意的是<code>发送操作成功完成后，对方确实可以成功收到，但是在发送方的“已发送”是没有的，需要手动append一份过去</code>。<br>执行append操作，需要用<code>imapSession</code>的，不要搞错了。😅<br> “已发送”文件夹的filepath，可能是 <code>Sent、Sent Messages</code>等等，具体看你解析的邮箱服务器，不一定都是Sent 哦。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//send</span></span><br><span class="line"><span class="built_in">NSData</span> *rfc822 = [msgBuilder data];</span><br><span class="line">MCOSMTPSendOperation *send = [smtpSession sendOperationWithData:rfc822];</span><br><span class="line">[send start:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        fail(error);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//发送成功后，手动添加到“已发送”；</span></span><br><span class="line">        MCOIMAPAppendMessageOperation *op = [imapSession appendMessageOperationWithFolder:[MMIMAPTool getVirtualNameFor:<span class="string">@"Sent"</span>] messageData:rfc822 flags:MCOMessageFlagMDNSent];</span><br><span class="line">        [op start:^(<span class="built_in">NSError</span> *error, uint32_t createdUID) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"create sent message :%@\nerror:%@"</span>, @(createdUID), error);</span><br><span class="line">        &#125;];</span><br><span class="line">        complete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>注：上一篇IMAP使用中提到过，创建草稿，过程和这个类似，不过最后执行append 是 放到 <code>草稿箱</code>，不是<code>已发送</code>了。</p>
<h5 id="POP-还没写"><a href="#POP-还没写" class="headerlink" title="POP 还没写"></a>POP <a href>还没写</a></h5>]]></content>
  </entry>
  <entry>
    <title>乌龙 之 我吐了</title>
    <url>/2020/06/02/%E4%B9%8C%E9%BE%99-%E6%88%91%E5%90%90%E4%BA%86/</url>
    <content><![CDATA[<p>之前用的 hexo 主题作者不维护了，所以换了个洋气的<del>~</del></p>
<p>乌龙就这样开始了：</p>
<a id="more"></a>

<p>文章里的代码块，明明设置了语言objective-c，可是高亮却怎么都不起作用，鼓捣了一通hljs，其实hexo 默认的就是hljs，我还跑去给人主题作者留了言。。。</p>
<p>搜索了半天大家都是怎么设置高亮的，我发现发表意见的人中，偶有几个是同行，抛开设置语言的方式，他们给代码设置的语言都是 <strong>objc</strong></p>
<p>于是我也</p>
<blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">​```objc</span><br></pre></td></tr></table></figure>
</blockquote>
<p>.</p>
<p>.</p>
<p>.</p>
<p>就好了。。。。。</p>
<p><strong>objective-c</strong>改为<strong>objc</strong> 。。。。。。就好了。。。。。。</p>
<p>我吐了真的是<del>~</del></p>
<p>PS：使用的md编辑器是Typora，我看人家有个语言的选项是 objective-c，我就选了。。。。。秀逗了。。。。。。</p>
<p><img src="/2020/06/02/%E4%B9%8C%E9%BE%99-%E6%88%91%E5%90%90%E4%BA%86/1.png" alt="图一"></p>
]]></content>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>去掉UIWebView底部的黑条</title>
    <url>/2018/12/13/%E5%8E%BB%E6%8E%89UIWebView%E5%BA%95%E9%83%A8%E7%9A%84%E9%BB%91%E6%9D%A1/</url>
    <content><![CDATA[<p>webview 在多次刷新内容后，正文的下面有一块莫名其妙的黑色区域，如图一，本以为是由于我改了“UIWebDocumentView” 的原因，看到这个属性改了一下，发现居然好了。。。<br><code>opaque 默认是YES</code><br>改为 <code>self.webView.opaque = NO;</code></p>
<a id="more"></a>

<p><img src="/2018/12/13/%E5%8E%BB%E6%8E%89UIWebView%E5%BA%95%E9%83%A8%E7%9A%84%E9%BB%91%E6%9D%A1/1.png" alt="图一"></p>
<p><img src="/2018/12/13/%E5%8E%BB%E6%8E%89UIWebView%E5%BA%95%E9%83%A8%E7%9A%84%E9%BB%91%E6%9D%A1/2.png" alt="图二"></p>
<p>看文档里面的注释，发现，我的英文真的不咋地，自己翻译吧。。。。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">getter</span>=isOpaque) <span class="built_in">BOOL</span>  opaque;                     </span><br><span class="line"><span class="comment">// default is YES. opaque views must fill their entire bounds or the results are undefined. </span></span><br><span class="line"><span class="comment">//the active CGContext in drawRect: will not have been cleared and may have non-zeroed pixels</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>吃饭啦</title>
    <url>/2020/05/22/%E5%90%83%E9%A5%AD%E5%95%A6/</url>
    <content><![CDATA[<p><img src="/2020/05/22/%E5%90%83%E9%A5%AD%E5%95%A6/0522lunch.jpg" alt></p>
<p>就算一个人在家次饭，也要元气满满的哦，介绍一下这个小菜单吧，哈哈：</p>
<p>🐟🐟🐟🐟清烤多春鱼</p>
<blockquote>
<p>京都多春雨，回首多春光。公子多春情，绿草多春芳。八载多春伤，橙子多春鱼。</p>
</blockquote>
<a id="more"></a>

<p>​    多春鱼的名字起得可以说非常贴切，四季多子，满腹鱼子，吃起来Q弹又有营养。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拔掉鱼鳃和内脏</span><br><span class="line">加一些料酒呀、生姜呀、胡椒粉 腌10分钟就可以喽</span><br><span class="line">烤箱上下220预热5分钟，烘烤时间设置为15分钟</span><br><span class="line">预热期间可以准备刷油了，轻轻刷一点就好了，因为我们是清烤嘛，嘻嘻~~</span><br></pre></td></tr></table></figure>



<p>🍆清蒸茄子</p>
<p>清蒸茄子是我夏天最喜欢吃的一道菜，爽口又没有热量😳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">茄子洗净切片，上锅蒸</span><br><span class="line">准备蒜和香油，蒜切末备用，看自己喜好放多少吧</span><br><span class="line">茄子整好以后，放在容器中，加入盐、蒜末、香油几滴</span><br><span class="line">可以开动了，香喷喷美滋滋呀</span><br></pre></td></tr></table></figure>

<p>PS：我个人很喜欢在菜里放大蒜，因为吃大蒜可以让人快乐。哈哈。</p>
<p>🌲另一个菜叫什么呢？</p>
<p>其实我也不知道，哈哈，土豆、青椒、洋葱大杂烩，切成小片，一起翻炒，喜欢吃肉可以放点肉粒，我不喜欢，所以是素炒的。</p>
<p>🍚最后配上一碗白米饭，可以开动啦<del>~</del></p>
<p>单身狗们看完会不会觉得很麻烦呢，一个人做这么多要多久呀，好烦。呐，时间管理大师说过(不是罗志祥🙅‍♂️)，所有的任务要区分好，并行和串行！拿我们这次的午餐举例：</p>
<blockquote>
<p>蒸🍚 -&gt; 处理🍆 -&gt; 上锅蒸 -&gt; 处理🐟 + 切土豆等等 -&gt; 🐟进烤箱 -&gt; 🍆出锅 -&gt; 炒大杂烩 = 吃饭啦<del>~</del></p>
</blockquote>
<p>为什么分享美食呢，其实我就是试一下图片为什么加不进去了，现在好了<del>~</del>QTQ</p>
]]></content>
  </entry>
  <entry>
    <title>由 Pod 导致的 File not found</title>
    <url>/2020/09/04/%E7%94%B1%20Pod%20%E5%AF%BC%E8%87%B4%E7%9A%84File%20not%20found/</url>
    <content><![CDATA[<p>今天对一个 Pod 库做了小版本的升级，然后又回退到原来的版本，CocoaPods 就不乐意了， 一直报 <code>#import &lt;Masonry/Masonry.h&gt; file not found</code> 类似的错误，所有的 Pod 库都这样，着实让人头大。</p>
<p>解决方法：<br> 点击 <code>YourProject -&gt; Project -&gt; 选中 YourProject -&gt; Info -&gt; Configurations -&gt;</code> 把对应的 <code>Debug</code> 和 <code>Release</code> 里的参数设为 <code>Pods-xxxxxx.Debug / Pods-xxxxxx.Release</code>（这些参数在未设置前应该是 None，可能 CocoaPods 在安装第三方库时没正确设置这个参数）。<br> 重新编译工程，应该能成功了。</p>
<p><img src="/2020/09/04/%E7%94%B1%20Pod%20%E5%AF%BC%E8%87%B4%E7%9A%84File%20not%20found/1.png" alt></p>
<h6 id><a href="#" class="headerlink" title></a></h6>]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>隐忍</title>
    <url>/2021/01/06/%E9%9A%90%E5%BF%8D/</url>
    <content><![CDATA[<p>124 VS 3565</p>
<p>可能傻子都知道，当然选择 3565 了。是吧。</p>
<p>一份美好的爱，在今天结束。</p>
<p>一份隐忍的爱，在今天开始。</p>
<p>希望你幸福，爱笑的汤先生。</p>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS编码规范总结</title>
    <url>/2017/01/04/iOS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h3 id="一、空格"><a href="#一、空格" class="headerlink" title="一、空格"></a>一、空格</h3><h4 id="在适当的地方、适当地加空格、可以适当地提高代码可读性"><a href="#在适当的地方、适当地加空格、可以适当地提高代码可读性" class="headerlink" title="在适当的地方、适当地加空格、可以适当地提高代码可读性"></a>在适当的地方、适当地加空格、可以适当地提高代码可读性</h4><p>你一定读过”紧凑型”的代码，一个字符挨着一个字符，如果不是会报错，可能类名和变量名之间都没有空格了。我之前认为吝啬空格的人是不是都生活的很纠结或者很没条理，明明可以豁达一些。但现在他们改变了我，”谁又能知道呢，毕竟人不能从表象就能分析透彻，也许他只是单纯的    懒   。。。。。。“</p>
<a id="more"></a>

<p>为了避免博客风格影响视觉，直接上图片吧。其实我不知道是不是有这样明确的编码规范，我只是看苹果的怎么写，我就怎么写，下面也只是举一些简单的例子。</p>
<p><img src="/2017/01/04/iOS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/1.png" alt></p>
<h3 id="二、计时器"><a href="#二、计时器" class="headerlink" title="二、计时器"></a>二、计时器</h3><h4 id="NSTimer-替换为dispatch-source-timer"><a href="#NSTimer-替换为dispatch-source-timer" class="headerlink" title="NSTimer 替换为dispatch source timer"></a>NSTimer 替换为dispatch source timer</h4><p>NSTimer 在主线程的 Runloop 里会在 Runloop 切换其它模式时停止，这时就需要手动在子线程开启一个模式为 NSRunLoopCommonModes 的 Runloop，并且释放不到位，会导致引用 Timer 的对象也得不到释放。 如果不想开启一个新的 Runloop，并且避免引用问题，可以用不跟 Runloop 关联的 dispatch source timer。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)createTimer &#123;</span><br><span class="line">    __block <span class="keyword">int</span> timeout = <span class="number">60</span>;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> global = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, global);</span><br><span class="line">    </span><br><span class="line">    dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, <span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span> * <span class="built_in">NSEC_PER_SEC</span>);</span><br><span class="line">    dispatch_source_set_event_handler(timer, ^&#123;</span><br><span class="line">        timeout --;</span><br><span class="line">        <span class="keyword">if</span> (timeout &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            dispatch_source_cancel(timer);</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="comment">//do something after timer done.</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_resume(timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多关于GCD的用法，请见我的另一个总结<a href="https://atang1011.github.io/2016/01/13/GCD%EF%BC%88Grand%20Central%20Dispatch%EF%BC%89/">GCD (Grand Central Dispatch)</a> 。</p>
<h3 id="三、URL字符串解析"><a href="#三、URL字符串解析" class="headerlink" title="三、URL字符串解析"></a>三、URL字符串解析</h3><h4 id="分析URL字符串的时候，使用-NSURLComponents-类做解析，不要通过字符串截取等方式"><a href="#分析URL字符串的时候，使用-NSURLComponents-类做解析，不要通过字符串截取等方式" class="headerlink" title="分析URL字符串的时候，使用 NSURLComponents 类做解析，不要通过字符串截取等方式"></a>分析URL字符串的时候，使用 NSURLComponents 类做解析，不要通过字符串截取等方式</h4><p>我看很多人的代码，在解析别人传给他的URL 字符串时（例如自己的APP被拉起时），都是使用 <code>NSString</code> 的各种截取方法，然后再自己做判断，这是有点”危险”的做法。如果你自信逻辑严谨的话，那没的说，如果你不擅长或者懒得做异常处理， <code>NSRange</code>  的 <code>location</code> 存不存在以及 <code>length</code> 越界问题，就可以把程序搞crash。所以建议不要这样做，使用 <code>NSURLComponents</code> 。文档<a href="https://developer.apple.com/documentation/foundation/nsurlcomponents" target="_blank" rel="noopener">NSURLComponents</a></p>
<p>看完文档就会知道，真的好方便。。。</p>
<ul>
<li>初始化就不多说了，看自己需要</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialize a NSURLComponents with all components undefined. Designated initializer.</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithURL:(<span class="built_in">NSURL</span> *)url resolvingAgainstBaseURL:(<span class="built_in">BOOL</span>)resolve;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)componentsWithURL:(<span class="built_in">NSURL</span> *)url resolvingAgainstBaseURL:(<span class="built_in">BOOL</span>)resolve;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithString:(<span class="built_in">NSString</span> *)URLString;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)componentsWithString:(<span class="built_in">NSString</span> *)URLString;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取URL里的内容，简直不要太方便哦，URLEncode之后的参数都准备好了</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *scheme; <span class="comment">// Attempting to set the scheme with an invalid scheme string will cause an exception.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *user;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *password;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *host;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSNumber</span> *port; <span class="comment">// Attempting to set a negative port number will cause an exception.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *path;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *query;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *fragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedUser;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedPassword;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedHost;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedPath;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedQuery;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedFragment;</span><br><span class="line"></span><br><span class="line"><span class="comment">//begin ios 9.0</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfScheme;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfUser;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfPassword;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfHost;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfPort;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfPath;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfQuery;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfFragment;</span><br></pre></td></tr></table></figure>

<p>当然关于 NSRange 的获取，是从ios 9.0 开始有的，适配低版本的话，需要注意一哈。</p>
<ul>
<li>参数的集合，<code>NSURLQueryItem</code> 类呢就是通过 key 、value 来取参数们了</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// API_AVAILABLE(macos(10.10), ios(8.0), watchos(2.0), tvos(9.0))</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLQueryItem</span> *&gt; *queryItems;</span><br><span class="line"><span class="comment">// API_AVAILABLE(macosx(10.13), ios(11.0), watchos(4.0), tvos(11.0))</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLQueryItem</span> *&gt; *percentEncodedQueryItems;</span><br></pre></td></tr></table></figure>

<p>我之前不是特别理解，参数要用数组＋Item的方式，直到遇到了那位给我传的URL里，有两个同名参数不同值的仁兄，我才更加体会到了苹果开发者的严谨。。。</p>
<h3 id="四、-枚举"><a href="#四、-枚举" class="headerlink" title="四、 枚举"></a>四、 枚举</h3><p>举一个简单的场景：聊天软件，会区分 单聊、群聊、聊天室、服务号等等等等 不同类型的会话，开发时在做页面间传值的时候，往往需要把类型传递下去来做不同的事情，怎么明确的传呢？如果这个项目是多人负责，每个人负责不同的模块，像下面这样写代码，时间久了谁也看不懂：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0单聊,1群聊</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>)<span class="built_in">NSInteger</span> type;</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">vc.type = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>不要笑，你肯定也写过这样的代码，模块多了、时间久了，type  是什么意思？Who JB Know 啊。</p>
<p><strong>枚举就在这个时候发挥作用了：增加代码可读性。</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, ConversationType) &#123;</span><br><span class="line">    <span class="comment">//单聊</span></span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//群组</span></span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//聊天室</span></span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样一来比起单薄的数字，是不是更见名知意了呢？而且 OC 中枚举定义值的时候，都是 枚举名 + 具体分类，例如我们写的这个枚举中单聊的定义就是  <code>ConversationType</code> + <code>PRIVATE</code> = <code>ConversationTypePRIVATE</code>。敲出来的时候好敲，哈哈。</p>
<p>有的同学可能会问了，应对类型是整型的 type 这个枚举是够用了，那用字符串来分类的呢？没错，这是个问题，尤其是和服务端对接久了，你会发现，他们使用 字符串 多过 数值类型。不急，我们来小探一下 OC 中枚举都怎么用的：</p>
<h4 id="普通枚举"><a href="#普通枚举" class="headerlink" title="普通枚举"></a>普通枚举</h4><h5 id="1、C-语言的枚举写法-enum"><a href="#1、C-语言的枚举写法-enum" class="headerlink" title="1、C 语言的枚举写法 enum"></a>1、C 语言的枚举写法 enum</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;</span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span>,</span><br><span class="line">&#125; ConversationType;</span><br></pre></td></tr></table></figure>

<h5 id="2、OC-整型枚举"><a href="#2、OC-整型枚举" class="headerlink" title="2、OC 整型枚举"></a>2、OC 整型枚举</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, ConversationType) &#123;</span><br><span class="line">    <span class="comment">//单聊</span></span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//群组</span></span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//聊天室</span></span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="3、字符串枚举实现方案"><a href="#3、字符串枚举实现方案" class="headerlink" title="3、字符串枚举实现方案"></a>3、字符串枚举实现方案</h5><h6 id="1、基于普通枚举，C-语言实现"><a href="#1、基于普通枚举，C-语言实现" class="headerlink" title="1、基于普通枚举，C 语言实现"></a>1、基于普通枚举，C 语言实现</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先定义一个普通的整型枚举</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, ConversationType) &#123;</span><br><span class="line">    <span class="comment">//单聊</span></span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//群组</span></span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//聊天室</span></span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现一个方法，实现里做 整型 和 字符串 的匹配</span></span><br><span class="line"><span class="built_in">NSString</span> *ConversationTypeString(ConversationType status) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> ConversationTypePRIVATE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"private"</span>;</span><br><span class="line">        <span class="keyword">case</span> ConversationTypeGROUP:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"group"</span>;</span><br><span class="line">        <span class="keyword">case</span> ConversationTypeCHATROOM:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"chatroom"</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者使用 一个 NSString * 类型的数组</span></span><br><span class="line"><span class="built_in">NSString</span> *ConversationTypeStringMap[] = &#123;</span><br><span class="line">    [ConversationTypePRIVATE] = <span class="string">@"private"</span>,</span><br><span class="line">    [ConversationTypeGROUP] = <span class="string">@"group"</span>,</span><br><span class="line">    [ConversationTypeCHATROOM] = <span class="string">@"chatroom"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>但这两种方式有一个弊端，就是不能像枚举类型一样直接作为一个类型 限定传参的类型。</strong></p>
<h6 id="2、宏定义"><a href="#2、宏定义" class="headerlink" title="2、宏定义"></a>2、宏定义</h6><p>初期我使用宏定义比较多，每个类型值定义一个宏。。。这里不举例了。。。</p>
<h6 id="3、苹果官方的做法"><a href="#3、苹果官方的做法" class="headerlink" title="3、苹果官方的做法"></a>3、苹果官方的做法</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.h 中 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSString</span> *ConversationTypeKey <span class="built_in">NS_STRING_ENUM</span>;</span><br><span class="line"></span><br><span class="line">FOUNDATION_EXPORT ConversationTypeKey <span class="keyword">const</span> ConversationTypeKeyPRIVATE;</span><br><span class="line">FOUNDATION_EXPORT ConversationTypeKey <span class="keyword">const</span> ConversationTypeKeyGROUP;</span><br><span class="line">FOUNDATION_EXPORT ConversationTypeKey <span class="keyword">const</span> ConversationTypeKeyCHATROOM;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.m 中 </span></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> ConversationTypeKeyPRIVATE = <span class="string">@"private"</span>;</span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> ConversationTypeKeyGROUP = <span class="string">@"group"</span>;</span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> ConversationTypeKeyCHATROOM = <span class="string">@"chatroom"</span>;</span><br></pre></td></tr></table></figure>

<p><strong>相比会产生过多二进制文件的宏定义方式, 建议用FOUNDATION_EXPORT</strong></p>
<h4 id="位移枚举"><a href="#位移枚举" class="headerlink" title="位移枚举"></a>位移枚举</h4><p>==</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>mailcore 2  iOS  之一 IMAP</title>
    <url>/2018/02/02/mailcore2-iOS%E4%B9%8B%E4%B8%80IMAP/</url>
    <content><![CDATA[<p>公司开发oa中的邮箱，资源限制，最后iOS开发采用的mailcore2-ios框架。研究的不深，只当做个分享，口条不好，凑合看吧。</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>我直接用的cocoapods，非常方便，只是资源包大了一点，耐心等待就好了，其他方式没试过。<br><code>pod &#39;mailcore2-ios&#39;</code></p>
<p><a href="https://github.com/MailCore/mailcore2" target="_blank" rel="noopener">https://github.com/MailCore/mailcore2</a> 官方，有问题提issue，开发者会很热心回答的。</p>
<a id="more"></a>

<h5 id="更新-纠错日志"><a href="#更新-纠错日志" class="headerlink" title="更新/纠错日志"></a>更新/纠错日志</h5><ul>
<li>2018-12-11 纠错：IMAP-4.单封邮件获取和处理.根据uid获取单封邮件 有误，<code>range的范围应该是（uid, 0），而不是(uid, 1)，这样获取到的是两封</code>，脑子秀逗了。</li>
<li>2018-12-11 更新：创建草稿邮件</li>
<li>2018-12-12 更新：SMTP协议</li>
</ul>
<h5 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h5><p>个人比较喜欢imap协议，功能比较丰富，不过用mailcore搞起来似乎费劲了一点，我也只是实现了一些基本功能，高级的还在研究。</p>
<p>计划分享一下下面几项🤗🤗🤗🤗🤗</p>
<ul>
<li>IMAP<ul>
<li>登录</li>
<li>文件夹列表、命名空间</li>
<li>邮件列表拉取</li>
<li>邮件列表中单封邮件内容获取和处理</li>
<li>邮件的各种标记添加</li>
<li>删除邮件</li>
<li>附件和html内容解析</li>
<li>草稿箱邮件创建</li>
</ul>
</li>
<li>POP</li>
<li>SMTP<ul>
<li>见<a href="https://atang1011.github.io/2018/12/12/mailcore2-iOS之二SMTP/">mailcore2-ios  之二 SMTP</a></li>
</ul>
</li>
</ul>
<h5 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h5><h6 id="1-登录"><a href="#1-登录" class="headerlink" title="1.登录"></a>1.登录</h6><p>首先设置账号信息，也就是创建session；然后校验；</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.imapSession.hostname = session.imapHost; <span class="comment">//imap.xxx.com.cn</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.username = session.username; <span class="comment">//littlecat@xxx.com.cn</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.password = session.password; <span class="comment">//password</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.port     = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)session.imapPort;<span class="comment">//143、993</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.connectionType = session.imapIsSSL ? MCOConnectionTypeTLS: MCOConnectionTypeClear;<span class="comment">//取决于你的邮件服务器是不是SSL的；</span></span><br></pre></td></tr></table></figure>

<p>校验信息：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPOperation *checkOp = [session checkAccountOperation];<span class="comment">//这里的session就是配置帐号信息的session</span></span><br><span class="line">[checkOp start:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"finished checking account."</span>);</span><br><span class="line">     <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">         complete(<span class="literal">nil</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         err(error);</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@"error loading account: %@"</span>, [error userInfo][<span class="string">@"NSLocalizedDescription"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h6 id="2-获取文件夹目录"><a href="#2-获取文件夹目录" class="headerlink" title="2.获取文件夹目录"></a>2.获取文件夹目录</h6><p>命名空间：它这里有个namespace，对于<code>中文名称</code>的📂名称，需要通过<code>命名空间</code>来解析，<code>不然很可能是👇这种乱码</code>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是当时解析网易邮箱的乱码，找原因找了好久😭😭😭，在一篇博客上看到的解决办法。</span></span><br><span class="line">INBOX</span><br><span class="line">&amp;g0l6P3ux-</span><br><span class="line">&amp;XfJT0ZAB-</span><br><span class="line">&amp;XfJSIJZk-</span><br><span class="line">&amp;V4NXPpCuTvY-</span><br><span class="line">&amp;dcVr0mWHTvZZOQ-</span><br><span class="line">&amp;Xn9USpCuTvY-</span><br><span class="line">&amp;i6KWBZCuTvY-</span><br><span class="line">Deleted Messages</span><br><span class="line">Archive</span><br><span class="line">Junk</span><br></pre></td></tr></table></figure>

<p>先把正确的放出来，找回点走下去的信心💔💔💗💖…</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">INBOX</span><br><span class="line">草稿箱</span><br><span class="line">已发送</span><br><span class="line">已删除</span><br><span class="line">垃圾邮件</span><br><span class="line">病毒文件夹</span><br><span class="line">广告邮件</span><br><span class="line">订阅邮件</span><br><span class="line">Deleted Messages</span><br><span class="line">Archive</span><br><span class="line">Junk</span><br></pre></td></tr></table></figure>

<p>因为<code>某些邮箱的session莫名其妙没有自带默认的命名空间</code>，我采取的笨办法是先去获取一下namespace，不过嘛，，，居然获取到的也时有时无😱😱😱😱😱</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPSession *session = [MMIMAPTool getSession];</span><br><span class="line">MCOIMAPFetchNamespaceOperation * op = [session fetchNamespaceOperation];</span><br><span class="line">[op start:^(<span class="built_in">NSError</span> * __<span class="keyword">nullable</span> error, <span class="built_in">NSDictionary</span> * namespaces) &#123;</span><br><span class="line">     MCOIMAPNamespace * namespace = (session.defaultNamespace != <span class="literal">nil</span>) ? session.defaultNamespace : [namespaces objectForKey:MCOIMAPNamespacePersonal];</span><br><span class="line">    <span class="keyword">if</span> (!namespace) &#123;</span><br><span class="line">        <span class="comment">//没有命名空间，很可能文件夹的名字解析出来是乱码，这个看个人怎么处理吧；</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果拿到了namespace，可以安心获取folderlist了</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>关键的一句：<code>NSString *folername = [namespace componentsFromPath:f.path][0];</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPFetchFoldersOperation * ops = [session fetchAllFoldersOperation];</span><br><span class="line">[ops start:^(<span class="built_in">NSError</span> * error,<span class="built_in">NSArray</span> *folders) &#123;</span><br><span class="line">   <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">NSMutableDictionary</span> *dic = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">   <span class="keyword">for</span> (MCOIMAPFolder *f <span class="keyword">in</span> folders) &#123;</span><br><span class="line">      <span class="built_in">NSString</span> *folername = [namespace componentsFromPath:f.path][<span class="number">0</span>];</span><br><span class="line">      [dic setValue:f.path forKey:folername];</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//继续其他处理；</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>获取某个文件夹的mail数目等信息</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPFolderInfoOperation *folderInfo = [session folderInfoOperation:foldername];</span><br><span class="line"></span><br><span class="line">[folderInfo start:^(<span class="built_in">NSError</span> *error, MCOIMAPFolderInfo *info) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;    </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">     &#125;</span><br><span class="line">    complete(info.messageCount);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h6 id="3-拉取某个文件夹邮件列表"><a href="#3-拉取某个文件夹邮件列表" class="headerlink" title="3.拉取某个文件夹邮件列表"></a>3.拉取某个文件夹邮件列表</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的kind我觉得是需要拉取的内容们，我是几乎大部分都down了，可以看情况自己选择；</span></span><br><span class="line"><span class="comment">//拉取范围，（0，UINT64_MAX）就是都拉取了，我是10条10条的来的。</span></span><br><span class="line">MCOIMAPMessagesRequestKind requestKind = (MCOIMAPMessagesRequestKind)</span><br><span class="line">(MCOIMAPMessagesRequestKindHeaders |</span><br><span class="line"> MCOIMAPMessagesRequestKindStructure |</span><br><span class="line"> MCOIMAPMessagesRequestKindInternalDate|</span><br><span class="line"> MCOIMAPMessagesRequestKindHeaderSubject |</span><br><span class="line"> MCOIMAPMessagesRequestKindFlags);</span><br><span class="line"></span><br><span class="line">MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(range.location, range.length)];<span class="comment">//range控制拉取的邮件的范围，UINT64_MAX</span></span><br><span class="line">MCOIMAPFetchMessagesOperation *op = [session fetchMessagesOperationWithFolder:foldername requestKind:requestKind uids:uids];</span><br><span class="line">[op start:^(<span class="built_in">NSError</span> * _Nullable error, <span class="built_in">NSArray</span> * _Nullable messages, MCOIndexSet * _Nullable vanishedMessages) &#123;</span><br><span class="line">     <span class="built_in">NSMutableArray</span> *listArr = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">     <span class="built_in">NSInteger</span> count = messages.count;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i ++) &#123;</span><br><span class="line">            MCOIMAPMessage *msg = messages[i];</span><br><span class="line">            <span class="comment">//一堆属性，自己摘取吧，大多是header里的，为了显示邮件列表，邮件内容是另外单独获取的，存储也只是存储了列表；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//又拍了一次顺序，好像有点蠢🙄🙄🙄🙄🙄。。。我是根据uid排序的，目前还没发现乱序什么的</span></span><br><span class="line">    <span class="built_in">NSSortDescriptor</span> *sortDescriptor = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"uid"</span> ascending:<span class="literal">NO</span>];</span><br><span class="line">    [listArr sortUsingDescriptors:[<span class="built_in">NSArray</span> arrayWithObject:sortDescriptor]];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>还有另外一个方法，但是实在没太搞懂里面的number参数，文档里说sequence number不能排序用，所以我没选择这个方法，主要是没懂👺👺👺👺👺👺👺</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Returns an operation to fetch messages by (sequence) number.</span></span><br><span class="line">- (MCOIMAPFetchMessagesOperation *) fetchMessagesByNumberOperationWithFolder:(<span class="built_in">NSString</span> *)folder requestKind:(MCOIMAPMessagesRequestKind)requestKind numbers:(MCOIndexSet *)numbers;</span><br></pre></td></tr></table></figure>

<h6 id="4-单封邮件获取和处理"><a href="#4-单封邮件获取和处理" class="headerlink" title="4.单封邮件获取和处理"></a>4.单封邮件获取和处理</h6><ul>
<li><p>根据uid获取单封邮件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//和获取邮件列表一样，不过range的长度是0；</span></span><br><span class="line">MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(uid, <span class="number">0</span>)];</span><br><span class="line"><span class="comment">//之前写错了，range长度应该是0，而不是1；</span></span><br><span class="line"><span class="comment">//MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(uid, 1)];</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取邮件纯文本内容（不包括html样式等）</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="comment">//这里是在上一步获取单个邮件的回调内进行的</span></span><br><span class="line">     <span class="comment">//这个方法是自动把文本中的空行之类的去掉了，也有不去掉和可选是否去掉的方法</span></span><br><span class="line">        MCOIMAPMessage *msg = [<span class="comment">//上一步的message];</span></span><br><span class="line">        MCOIMAPMessageRenderingOperation *  messageRenderingOperation = [session plainTextBodyRenderingOperationWithMessage:msg folder:foldername];</span><br><span class="line">        [messageRenderingOperation start:^(<span class="built_in">NSString</span> * plainTextBodyString,<span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">                complete(plainTextBodyString, msg);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"fetch plain text error:%@"</span>,error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">文档里注释的不能再清楚了，自己查阅吧😈😈😈😈😈</span><br><span class="line"><span class="comment">//Returns an operation to render the plain text version of a message.</span></span><br><span class="line">- (MCOIMAPMessageRenderingOperation *) plainTextRenderingOperationWithMessage:(MCOIMAPMessage *)message folder:(<span class="built_in">NSString</span> *)folder;</span><br><span class="line"><span class="comment">// All end of line will be removed and white spaces cleaned up if requested.</span></span><br><span class="line">- (MCOIMAPMessageRenderingOperation *) plainTextBodyRenderingOperationWithMessage:(MCOIMAPMessage *)message folder:(<span class="built_in">NSString</span> *)folder stripWhitespace:(<span class="built_in">BOOL</span>)stripWhitespace;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取html内容，放在一个webview中显示基本内容应该没问题了<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPMessage *msg = [同样是上一步的message];</span><br><span class="line">MCOIMAPMessageRenderingOperation *  messageRenderingOperation = [session htmlBodyRenderingOperationWithMessage:msg folder:foldername];</span><br><span class="line">[messageRenderingOperation start:^(<span class="built_in">NSString</span> * _Nullable htmlString, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">     <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">         complete(htmlString, msg);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@"fetch plain text error:%@"</span>,error);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h6 id="5-添加各种标记"><a href="#5-添加各种标记" class="headerlink" title="5.添加各种标记"></a>5.添加各种标记</h6><p>已读未读，小红旗标记等等。需要注意的是，<code>“kind”区分是添加标记还是移除标记</code>，例如已读“MCOMessageFlagSeen”标记，移除就成了未读，<code>没有“unseen”之类的。。。</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setFlagged:(<span class="built_in">BOOL</span>)flagged message:(<span class="built_in">NSInteger</span>)uid folder:(<span class="built_in">NSString</span> *)folder &#123;</span><br><span class="line">    MCOIMAPSession *session = <span class="comment">//imap session；</span></span><br><span class="line">    MCOIndexSet *uids = [MCOIndexSet indexSetWithIndex:uid];</span><br><span class="line">    MCOIMAPOperation *op = [session storeFlagsOperationWithFolder:folder</span><br><span class="line">                                                             uids:uids</span><br><span class="line">                                                             kind:(flagged ? MCOIMAPStoreFlagsRequestKindSet : MCOIMAPStoreFlagsRequestKindRemove)</span><br><span class="line">                                                            flags:MCOMessageFlagFlagged];</span><br><span class="line">    [op start:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"store star flag 's error: %@"</span>,error);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要批量设置标记，uids可以通过range来创建</span></span><br><span class="line">    MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(range.location, range.length)];</span><br></pre></td></tr></table></figure>

<h6 id="6-删除邮件"><a href="#6-删除邮件" class="headerlink" title="6.删除邮件"></a>6.删除邮件</h6><p>为什么先说的标记那部分，因为删除邮件也是添加“delete”标记。这里需要做一个区分，<code>要删除的邮件是不是在 “已删除/草稿箱” 这两个文件夹</code>。</p>
<p>主要操作有三个：</p>
<ul>
<li>1、copy一份到“已删除”</li>
<li>2、设置删除标记</li>
<li>3、执行擦除expunge操作</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//**如果是不在已删除，草稿箱，执行1、2、3</span></span><br><span class="line"><span class="comment">//**如果在，只执行2、3</span></span><br><span class="line">    <span class="keyword">if</span> (![folder isEqualToString:deleteFolder] &amp;&amp; ![folder isEqualToString:draftFolder]) &#123;</span><br><span class="line">        <span class="comment">//copy 一份到已删除</span></span><br><span class="line">        MCOIMAPCopyMessagesOperation *op = [imapSession copyMessagesOperationWithFolder:folder</span><br><span class="line">                                                                                                    uids:[MCOIndexSet indexSetWithIndex:uid]</span><br><span class="line">                                                                                              destFolder:deleteFolder];</span><br><span class="line">        [op start:^(<span class="built_in">NSError</span> *error, <span class="built_in">NSDictionary</span> *uidMapping) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Error copy message to folder:%@"</span>, error);</span><br><span class="line">            [<span class="keyword">self</span> unturnedDelete:uid folder:folder];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> unturnedDelete:uid folder:folder];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)unturnedDelete:(<span class="built_in">NSInteger</span>)uid folder:(<span class="built_in">NSString</span> *)folder </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先添加删除flags</span></span><br><span class="line">    MCOIMAPOperation * op2 = [imapSession storeFlagsOperationWithFolder:folder</span><br><span class="line">                                                                                    uids:[MCOIndexSet indexSetWithIndex:uid]</span><br><span class="line">                                                                                    kind:MCOIMAPStoreFlagsRequestKindSet</span><br><span class="line">                                                                                   flags:MCOMessageFlagDeleted];</span><br><span class="line">    [op2 start:^(<span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">        <span class="comment">//添加成功之后对当前文件夹进行expunge操作</span></span><br><span class="line">        MCOIMAPOperation *deleteOp = [imapSession expungeOperation:folder];</span><br><span class="line">        [deleteOp start:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">            <span class="keyword">if</span>(error) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"Error expunging folder:%@"</span>, error);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"Successfully expunged folder"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="7-附件处理和html内容解析"><a href="#7-附件处理和html内容解析" class="headerlink" title="7.附件处理和html内容解析"></a>7.附件处理和html内容解析</h6><ul>
<li><p>官方demo<br><a href="https://github.com/MailCore/mailcore2/tree/master/example/ios/iOS%20UI%20Test/iOS%20UI%20Test" target="_blank" rel="noopener">https://github.com/MailCore/mailcore2/tree/master/example/ios/iOS%20UI%20Test/iOS%20UI%20Test</a><br>github上他们有写一个demo，我直接用了里面两个类，messageView又自己加了些乱七八糟的逻辑。protocol方便解析的，具体讲解后续更新。<br><img src="/2018/02/02/mailcore2-iOS%E4%B9%8B%E4%B8%80IMAP/1.png" alt></p>
</li>
<li><p>MCOHTMLRendererIMAPDelegate<br>这个协议里面，提供了可以自主解析附件、图片、html内容，以及简单给定html展示样式的方法。先贴出header、正文、附件，我自己写的一个简单展示模板吧，内容处理这块东西太多了，整理一下再继续更新。<br><a href="https://github.com/zhengyatian/TemplateForMailCore2" target="_blank" rel="noopener">TemplateForAttachment.html</a><br><a href="https://github.com/zhengyatian/TemplateForMailCore2" target="_blank" rel="noopener">TemplateForMessage.html</a><br><a href="https://github.com/zhengyatian/TemplateForMailCore2" target="_blank" rel="noopener">TemplateForMainHeader.html</a></p>
</li>
</ul>
<h6 id="8-创建草稿箱邮件"><a href="#8-创建草稿箱邮件" class="headerlink" title="8.创建草稿箱邮件"></a>8.创建草稿箱邮件</h6><p>​     “append” 拼接的概念，往一个文件夹内添加邮件；</p>
<ul>
<li>1、新建一封新邮件(SMTP中讲创建邮件)</li>
<li>2、获取你的草稿箱文件夹名称</li>
<li>3、执行append操作<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的data就是新建的邮件；</span></span><br><span class="line">- (<span class="keyword">void</span>)createDraft:(<span class="built_in">NSData</span> *)data block:(<span class="keyword">void</span>(^)(<span class="keyword">bool</span> success, uint32_t uid, <span class="built_in">NSString</span> *folder))block</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!imapSession ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSString</span> *folder = <span class="string">@"Drafts"</span> <span class="comment">//草稿箱 ,或者是你邮箱服务器解析到的草稿箱文件夹名称；</span></span><br><span class="line"></span><br><span class="line">    MCOIMAPAppendMessageOperation *op = [imapSession appendMessageOperationWithFolder:folder messageData:data flags:MCOMessageFlagDraft];</span><br><span class="line">    [op start:^(<span class="built_in">NSError</span> *error, uint32_t createdUID) &#123;</span><br><span class="line">        <span class="comment">//do your operation;</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"create Draft message :%@"</span>,@(createdUID));</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HTTP 的一点儿小知识</title>
    <url>/2017/10/02/HTTP%20%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><h3 id="一、超文本传输协议-超文本传输协议-Hypertext-Transfer-Protocol"><a href="#一、超文本传输协议-超文本传输协议-Hypertext-Transfer-Protocol" class="headerlink" title="一、超文本传输协议 超文本传输协议(Hypertext Transfer Protocol)"></a>一、超文本传输协议 超文本传输协议(Hypertext Transfer Protocol)</h3><blockquote>
<p>http协议规定了客户端和服务器之间的数据传输格式。</p>
<p>http协议是在网络开发中最常用的协议，不管是移动客户端还是PC端,访问网络资源经常使用http协议。</p>
</blockquote>
<p>​        <a id="more"></a></p>
<p>http优点:</p>
<ul>
<li><strong>简单快速</strong>：http协议简单,通信速度很快.</li>
<li><strong>灵活</strong>：http协议允许传输任意类型的数据.</li>
<li>http协议是<strong>短连接</strong>(非持续性连接) (TCP/IP  UDP/IP)：http协议限制每次连接只处理一个请求，服务器对客户端的请求作出响应后，马上断开连接，这种方式可以节省传输时间。</li>
</ul>
<h3 id="二、-http协议的使用"><a href="#二、-http协议的使用" class="headerlink" title="二、 http协议的使用"></a>二、 http协议的使用</h3><ol>
<li><strong>请求</strong>：客户端向服务器索要数据。</li>
</ol>
<p>​        http协议规定：一个完整的http请求包含<code>请求行、请求头、请求体</code>三个部分。</p>
<ul>
<li>请求行 : 包含了请求方法，请求资源路径，http协议版本。</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/resources/images/</span> HTTP/1.1</span><br></pre></td></tr></table></figure>

<ul>
<li>请求头：包含了对客户端的环境描述，客户端请求的主机地址等信息。</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">:</span><br><span class="line"><span class="attribute">Accept</span>: text/html // 客户端所能接收的数据类型</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-cn // 客户端的语言环境</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip // 客户端支持的数据压缩格式</span><br><span class="line"><span class="attribute">Host</span>: m.baidu.com // 客户端想访问的服务器主机地址</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:37.0) Gecko/20100101 Firefox/37.0// 客户端的类型,客户端的软件环境</span><br></pre></td></tr></table></figure>

<ul>
<li>请求体：客户端发给服务器的具体数据，比如文件/图片等。 </li>
</ul>
<ol start="2">
<li><strong>响应</strong>：服务器返回客户端想要的数据。</li>
</ol>
<p>​        http协议规定：一个完整的http响应包含 <code>状态行、响应头、实体内容</code> 三个部分。</p>
<ul>
<li>状态行：包含了http协议版本,状态吗,状态英文名称。</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br></pre></td></tr></table></figure>

<ul>
<li>响应头：包含了对服务器的描述,对返回数据的描述。    </li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">:</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip // 服务器支持的数据压缩格式</span><br><span class="line"><span class="attribute">Content-Length</span>:  1528 // 返回数据的长度</span><br><span class="line"><span class="attribute">Content-Type</span>:  application/xhtml+xml;charset=utf-8// 返回数据的类型</span><br><span class="line"><span class="attribute">Date</span>: Mon, 15 Jun 201509:06:46 GMT // 响应的时间</span><br><span class="line"><span class="attribute">Server</span>: apache  // 服务器类型</span><br></pre></td></tr></table></figure>

<ul>
<li>实体内容：服务器返回给客户端的具体数据(图片/html/文件…)。  </li>
</ul>
<ol start="3">
<li>发送http请求</li>
</ol>
<p>​        在iOS开发中,发送http请求的方案有很多，常见的有如下几种：</p>
<ul>
<li>苹果原生:</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURLConnection</span>: 用法简单,古老经典的一种方案.</span><br><span class="line"><span class="built_in">NSURLSession</span>: iOS7以后推出的技术,功能比<span class="built_in">NSURLConnection</span>更加强大.</span><br><span class="line"><span class="built_in">CFNetWork</span>: <span class="built_in">NSURL</span> 的底层,纯C语言,一般不用.</span><br></pre></td></tr></table></figure>

<ul>
<li>第三方框架:</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">ASIHttpRequest: http终结者,功能很强大,可惜作者已停止更新.</span><br><span class="line">AFNetWorking: 简单易用,提供了基本够用的常用功能,维护和使用者多.</span><br><span class="line"><span class="built_in">MKNetWorkKit</span>: 简单易用,产自印度,维护和使用者少.</span><br></pre></td></tr></table></figure>

<p>​      </p>
<h3 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h3><h4 id="1-http方法"><a href="#1-http方法" class="headerlink" title="1. http方法"></a>1. http方法</h4><p>​    http协议定义了很多方法对应不同的资源操作,其中最常用的是GET 和 POST 方法.</p>
<blockquote>
<p>GET、POST、OPTIONS、HEAD、PUT、DELETE、TRACE、CONNECT、PATCH</p>
<p>增:PUT</p>
<p> 删:DELETE</p>
<p>改:POST</p>
<p>查:GET    </p>
</blockquote>
<ul>
<li>OPTIONS</li>
</ul>
<p>返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。</p>
<ul>
<li>HEAD</li>
</ul>
<p>向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</p>
<ul>
<li>GET</li>
</ul>
<p>向特定的资源发出请求。注意：GET方法不应当被用于产生“副作用”的操作中。</p>
<ul>
<li>POST</li>
</ul>
<p>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</p>
<ul>
<li>PUT</li>
</ul>
<p>向指定资源位置上传其最新内容。</p>
<ul>
<li>DELETE</li>
</ul>
<p>请求服务器删除Request-URI所标识的资源。</p>
<ul>
<li>TRACE</li>
</ul>
<p>回显服务器收到的请求，主要用于测试或诊断。</p>
<ul>
<li>CONNECT</li>
</ul>
<p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p>
<p>​       </p>
<h4 id="2-参数"><a href="#2-参数" class="headerlink" title="2. 参数"></a>2. 参数</h4><p>因为 GET 和 POST 可以实现上述所有操作，所以，在现实开发中，我们只要会用GET 和 POST 方法就可以了。在与服务器交互时，有时候需要给服务器发送一些数据，比如登录时需要发送用户名和密码。</p>
<p><strong>参数</strong>:就是指传递给服务器的具体数据.</p>
<h4 id="3-GET-和-POST-的主要区别表现在参数的传递上"><a href="#3-GET-和-POST-的主要区别表现在参数的传递上" class="headerlink" title="3. GET 和 POST 的主要区别表现在参数的传递上"></a>3. GET 和 POST 的主要区别表现在参数的传递上</h4><h6 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h6><p>​    GET的本质是从服务器得到数据，效率更高，并且GET请求可以被缓存。</p>
<p>​    注意：网络缓存数据，保存在SQLite的数据库中(路径：NSHomeDirectory())。</p>
<p>​        查看缓存数据命令行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">cd 文件目录   (打开文件目录)</span><br><span class="line">ls   查看当前文件下目录</span><br><span class="line">sqlite3 Cache.db   打开数据库</span><br><span class="line">.tables    查看数据库中的表单</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cfurl_cache_response;   查看服务器响应缓存</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cfurl_cache_receiver_data;   查看服务器返回的数据缓存</span><br></pre></td></tr></table></figure>

<p>​    在请求 URL 后面以 ? 的形式跟上发给服务器的参数，参数以 “参数名”=”参数值” 的形式拼接，多个参数之间用 &amp; 分隔。</p>
<p>​    注意：GET的长度是有限制的，不同的浏览器有不同的长度限制，一般在2~8K之间。         </p>
<h6 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h6><p>​    POST的本质是向服务器发送数据，也可以获得服务器处理之后的结果，效率不如GET。POST请求不可以被缓存，每次刷新之后都需要重新提交表单。发送给服务器的参数全部放在 <code>请求体</code> 中，理论上，POST传递的数据量没有限制。</p>
<p>​    注意：所有涉及到用户隐私的数据(密码/银行卡号等…)都要用POST的方式传递。    </p>
<h4 id="4-注意-URL中不能出现空格以及中文等特殊符号"><a href="#4-注意-URL中不能出现空格以及中文等特殊符号" class="headerlink" title="4. 注意:URL中不能出现空格以及中文等特殊符号"></a>4. 注意:URL中不能出现空格以及中文等特殊符号</h4><ul>
<li><p>URL中,所有的字符都必须是 ASCII 码</p>
</li>
<li><p>URL中不能出现中文和特殊符号(如空格)</p>
</li>
</ul>
<p>​    所以，如果 URL 中出现了中文，需要添加百分号转义。    </p>
<h2 id="URL-中-井号（锚点）的用法"><a href="#URL-中-井号（锚点）的用法" class="headerlink" title="URL 中 # 井号（锚点）的用法"></a>URL 中 # 井号（锚点）的用法</h2><p>​       我们经常使用URL 定位，传递参数等应用，最经常使用的是？ 问号，一般作为参数传递，而我们在接触到单页开发模式的时候会接触到url 中大量# 井号的使用，有时候会对这三个常见符号有些分不清，搞不懂具体含义。 </p>
<h3 id="涵义"><a href="#涵义" class="headerlink" title="# 涵义"></a># 涵义</h3><p> 在url 中使用# 例如  index.html#product  含义一般是定位到本页面的product位置，所以# 在url 中一般是作为页面定位使用，那么product 到底是用什么定位 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"product"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"product"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这两种方式都可以把滚动条定位到页面的响应位置 </p>
<blockquote>
<p>Twitter 在改版的时候把 改版前的用户主页网址为<a href="http://twitter.com/username改版后，就变成了http://twitter.com/#!/username" target="_blank" rel="noopener">http://twitter.com/username改版后，就变成了http://twitter.com/#!/username</a> 这是主流网站第一次将”#”大规模用于重要URL中。这表明井号（Hash）的作用正在被重新认识 </p>
</blockquote>
<h3 id="特性1：HTTP-请求中的作用"><a href="#特性1：HTTP-请求中的作用" class="headerlink" title="特性1：HTTP 请求中的作用"></a>特性1：HTTP 请求中的作用</h3><p>​    是用来指导浏览器动作的，对服务器端完全无用。所以，HTTP请求中不包括#。</p>
<p>​    比如，访问下面的网址，<a href="http://www.example.com/index.html#print，浏览器实际发出的请求是这样的：" target="_blank" rel="noopener">http://www.example.com/index.html#print，浏览器实际发出的请求是这样的：</a></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /index.html HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span>: www.example.com</span><br></pre></td></tr></table></figure>

<pre><code>在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。</code></pre><p>​    比如，下面URL的原意是指定一个颜色值：<a href="http://www.example.com/?color=#fff，但是，浏览器实际发出的请求是：" target="_blank" rel="noopener">http://www.example.com/?color=#fff，但是，浏览器实际发出的请求是：</a></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /?color= HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span>: www.example.com</span><br></pre></td></tr></table></figure>



<h3 id="特性2：改版-不会导致网页重载"><a href="#特性2：改版-不会导致网页重载" class="headerlink" title="特性2：改版#不会导致网页重载"></a>特性2：改版#不会导致网页重载</h3><p>​    单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页。</p>
<p>​    比如，从<a href="http://www.example.com/index.html#location1改成http://www.example.com/index.html#location2，浏览器不会重新向服务器请求index.html。" target="_blank" rel="noopener">http://www.example.com/index.html#location1改成http://www.example.com/index.html#location2，浏览器不会重新向服务器请求index.html。</a></p>
<h3 id="特性3：改版-后对history-范围历史的影响"><a href="#特性3：改版-后对history-范围历史的影响" class="headerlink" title="特性3：改版# 后对history 范围历史的影响"></a>特性3：改版# 后对history 范围历史的影响</h3><p>​    每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。这对于ajax应用程序特别有用，可以用不同的#值，表示不同的访问状态，然后向用户给出可以访问某个状态的链接。值得注意的是，上述规则对IE 6和IE 7不成立，它们不会因为#的改变而增加历史记录。</p>
<p>​    鉴于特性2、3 实现了在单页下view 的路由和历史回退，目前h5手机开发所采用的单页模式的基础。</p>
<h3 id="特性4：window-location-hash读取-值"><a href="#特性4：window-location-hash读取-值" class="headerlink" title="特性4：window.location.hash读取#值"></a>特性4：window.location.hash读取#值</h3><pre><code>window.location.hash 这个属性可读可写。读取时，可以用来判断网页状态是否改变；写入时，则会在不重载网页的前提下，创造一条访问历史记录。</code></pre><h3 id="特性5：onhashchange事件-H5新增"><a href="#特性5：onhashchange事件-H5新增" class="headerlink" title="特性5：onhashchange事件 H5新增"></a>特性5：onhashchange事件 H5新增</h3><p>​    这是一个HTML 5新增的事件，当#值发生变化时，就会触发这个事件。IE8+、Firefox 3.6+、Chrome 5+、Safari 4.0+支持该事件。</p>
<p>　　它的使用方法有三种：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">window.onhashchange = func; </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onhashchange</span>=<span class="string">"func();"</span>&gt;</span> </span><br><span class="line">window.addEventListener("hashchange"， func, false);</span><br></pre></td></tr></table></figure>



<p>对于不支持onhashchange的浏览器，可以用setInterval监控location.hash的变化。</p>
<h3 id="特性6：Google抓取-的机制"><a href="#特性6：Google抓取-的机制" class="headerlink" title="特性6：Google抓取#的机制"></a>特性6：Google抓取#的机制</h3><p>​    默认情况下，Google的网络蜘蛛忽视URL的#部分。但是，Google还规定，如果你希望Ajax生成的内容被浏览引擎读取，那么URL中可以使用”#!”，Google会自动将其后面的内容转成查询字符串escaped_fragment的值。</p>
<p>　　比如，Google发现新版Twitter的URL：<a href="http://twitter.com/#!/username" target="_blank" rel="noopener">http://twitter.com/#!/username</a></p>
<p>　　就会自动抓取另一个URL：<a href="http://twitter.com/?escaped_fragment=/username" target="_blank" rel="noopener">http://twitter.com/?escaped_fragment=/username</a> </p>
<p>　　通过这种机制，Google就可以索引动态的Ajax内容。</p>
<p>群讨论：</p>
<p>URL中的#只是作为一个分解符，#后面的内容，服务器不会处理，但是浏览器页面能获取到，但是拿到这个值干啥用，就看怎么处理了，比如现在H5做的SPA，就是靠#后面的内容作为参数，来处理前端路由。</p>
<h2 id="网络相应的常见状态"><a href="#网络相应的常见状态" class="headerlink" title="网络相应的常见状态"></a>网络相应的常见状态</h2><h3 id="1xx消息"><a href="#1xx消息" class="headerlink" title="1xx消息"></a>1xx消息</h3><p>​    这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p>
<h4 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h4><p>​    客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</p>
<h4 id="101-Switching-Protocols"><a href="#101-Switching-Protocols" class="headerlink" title="101 Switching Protocols"></a>101 Switching Protocols</h4><p>​    服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。: 只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</p>
<h4 id="102-Processing"><a href="#102-Processing" class="headerlink" title="102 Processing"></a>102 Processing</h4><p>​    由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</p>
<h3 id="2xx成功"><a href="#2xx成功" class="headerlink" title="2xx成功"></a>2xx成功</h3><p>​    这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>
<h4 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h4><p>​    请求已成功，请求所希望的响应头或数据体将随此响应返回。</p>
<h4 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h4><p>​    请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。</p>
<h4 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h4><p>​    服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。:返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</p>
<h4 id="203-Non-Authoritative-Information"><a href="#203-Non-Authoritative-Information" class="headerlink" title="203 Non-Authoritative Information"></a>203 Non-Authoritative Information</h4><p>​    服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超 集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</p>
<h4 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h4><p>​    服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。</p>
<p>​    如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。</p>
<p>​    由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</p>
<h4 id="205-Reset-Content"><a href="#205-Reset-Content" class="headerlink" title="205 Reset Content"></a>205 Reset Content</h4><p>​    服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。</p>
<pre><code>与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</code></pre><h4 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h4><p>​    服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>
<p>​    该请求必须包含Range头信息来指示客户端希望得到的内容范围，并且可能包含If-Range来作为请求条件。</p>
<p>​    响应必须包含如下的头部域：</p>
<blockquote>
<p>Content-Range用以指示本次响应中返回的内容的范围；如果是Content-Type为multipart/byteranges的多段下载，则每一multipart段中都应包含Content-Range域用以指示本段的内容范围。假如响应中包含Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。</p>
<p>Date</p>
<p>ETag和／或Content-Location，假如同样的请求本应该返回200响应。</p>
<p>Expires, Cache-Control，和／或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。</p>
</blockquote>
<p>​    假如本响应请求使用了If-Range强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了If-Range弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。</p>
<p>​    假如ETag或Last-Modified头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。</p>
<p>​    任何不支持Range以及Content-Range头的缓存都禁止缓存206响应返回的内容。</p>
<p>207 Multi-Status</p>
<p>​    由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>
<h3 id="3xx重定向"><a href="#3xx重定向" class="headerlink" title="3xx重定向"></a>3xx重定向</h3><p>​    这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p>
<p>​    当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>
<h4 id="300-Multiple-Choices"><a href="#300-Multiple-Choices" class="headerlink" title="300 Multiple Choices"></a>300 Multiple Choices</h4><p>​    被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</p>
<p>​    除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。</p>
<p>​    如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的URI；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>
<h4 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h4><p>​    被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p>
<p>​    新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>​    如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<p>​    注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>
<h4 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h4><p>​    请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p>
<p>​    新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>​    如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<p>​    注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>
<h4 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h4><p>​    对应当前请求的响应可以在另一个URI上被找到，而且客户端应当采用GET的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。</p>
<p>​    新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>​    注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>
<h4 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h4><p>​    如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</p>
<p>​    该响应必须包含以下的头信息：</p>
<blockquote>
<p>Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将Date字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。</p>
<p>ETag和／或Content-Location，假如同样的请求本应返回200响应。</p>
<p>Expires, Cache-Control，和／或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。</p>
</blockquote>
<p>​    假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的GET请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。</p>
<p>​    假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。</p>
<p>​    假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</p>
<h4 id="305-Use-Proxy"><a href="#305-Use-Proxy" class="headerlink" title="305 Use Proxy"></a>305 Use Proxy</h4><p>​    被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。</p>
<p>​    注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器创建。忽视这些限制可能导致严重的安全后果。</p>
<h4 id="306-Switch-Proxy"><a href="#306-Switch-Proxy" class="headerlink" title="306 Switch Proxy"></a>306 Switch Proxy</h4><p>​    在最新版的规范中，306状态码已经不再被使用。</p>
<h4 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h4><p>​    请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p>
<p>​    新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的URI发出访问请求。</p>
<p>​    如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<h3 id="4xx客户端错误"><a href="#4xx客户端错误" class="headerlink" title="4xx客户端错误"></a>4xx客户端错误</h3><p>​    这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>
<p>​    如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p>
<h4 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h4><p>​    由于包含语法错误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。</p>
<h4 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h4><p>​    当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</p>
<h4 id="402-Payment-Required"><a href="#402-Payment-Required" class="headerlink" title="402 Payment Required"></a>402 Payment Required</h4><p>​    该状态码是为了将来可能的需求而预留的。</p>
<h4 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h4><p>​    服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>
<h4 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h4><p>​    请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>
<h4 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h4><p>​    请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。</p>
<p>​    鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>
<h4 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h4><p>​    请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。</p>
<p>​    除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>
<h4 id="407-Proxy-Authentication-Required"><a href="#407-Proxy-Authentication-Required" class="headerlink" title="407 Proxy Authentication Required"></a>407 Proxy Authentication Required</h4><p>​    与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。参见RFC 2617。</p>
<h4 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h4><p>​    请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p>
<h4 id="409-Conflict"><a href="#409-Conflict" class="headerlink" title="409 Conflict"></a>409 Conflict</h4><p>​    由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。</p>
<p>​    冲突通常发生于对PUT请求的处理中。例如，在采用版本检查的环境下，某次PUT提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</p>
<h4 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h4><p>​    被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。</p>
<p>​    410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</p>
<h4 id="411-Length-Required"><a href="#411-Length-Required" class="headerlink" title="411 Length Required"></a>411 Length Required</h4><p>​    服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。</p>
<h4 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 Precondition Failed"></a>412 Precondition Failed</h4><p>​    服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>
<h4 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h4><p>​    服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p>
<p>​    如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p>
<h4 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h4><p>​    请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：</p>
<p>​        本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。</p>
<p>​        重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。</p>
<p>​        客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</p>
<h4 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h4><p>​    对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</p>
<p>416 Requested Range Not Satisfiable</p>
<p>​    如果请求中包含了Range请求头，并且Range中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义If-Range请求头，那么服务器就应当返回416状态码。</p>
<p>​    假如Range使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个Content-Range实体头，用以指明当前资源的长度。这个响应也被禁止使用multipart/byteranges作为其Content-Type。</p>
<h4 id="417-Expectation-Failed"><a href="#417-Expectation-Failed" class="headerlink" title="417 Expectation Failed"></a>417 Expectation Failed</h4><p>​    在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。</p>
<h4 id="418-I’m-a-teapot"><a href="#418-I’m-a-teapot" class="headerlink" title="418 I’m a teapot"></a>418 I’m a teapot</h4><p>​    本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议中定义的，并不需要在真实的HTTP服务器中定义。</p>
<h4 id="421-There-are-too-many-connections-from-your-internet-address"><a href="#421-There-are-too-many-connections-from-your-internet-address" class="headerlink" title="421 There are too many connections from your internet address"></a>421 There are too many connections from your internet address</h4><p>​    从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</p>
<h4 id="422-Unprocessable-Entity"><a href="#422-Unprocessable-Entity" class="headerlink" title="422 Unprocessable Entity"></a>422 Unprocessable Entity</h4><p>​    请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）</p>
<h4 id="423-Locked"><a href="#423-Locked" class="headerlink" title="423 Locked"></a>423 Locked</h4><p>​    当前资源被锁定。（RFC 4918 WebDAV）</p>
<h4 id="424-Failed-Dependency"><a href="#424-Failed-Dependency" class="headerlink" title="424 Failed Dependency"></a>424 Failed Dependency</h4><p>​    由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。（RFC 4918 WebDAV）</p>
<h4 id="425-Unordered-Collection"><a href="#425-Unordered-Collection" class="headerlink" title="425 Unordered Collection"></a>425 Unordered Collection</h4><p>​    在WebDav Advanced Collections草案中定义，但是未出现在《WebDAV顺序集协议》（RFC 3658）中。</p>
<h4 id="426-Upgrade-Required"><a href="#426-Upgrade-Required" class="headerlink" title="426 Upgrade Required"></a>426 Upgrade Required</h4><p>​    客户端应当切换到TLS/1.0。（RFC 2817）</p>
<h4 id="449-Retry-With"><a href="#449-Retry-With" class="headerlink" title="449 Retry With"></a>449 Retry With</h4><p>​    由微软扩展，代表请求应当在执行完适当的操作后进行重试。</p>
<h3 id="5xx服务器错误"><a href="#5xx服务器错误" class="headerlink" title="5xx服务器错误"></a>5xx服务器错误</h3><p>​    这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。</p>
<p>​    这些状态码适用于任何响应方法。</p>
<h4 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h4><p>​    服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</p>
<h4 id="501-Not-Implemented"><a href="#501-Not-Implemented" class="headerlink" title="501 Not Implemented"></a>501 Not Implemented</h4><p>​    服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</p>
<h4 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h4><p>​    作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>
<h4 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h4><p>​    由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p>
<h4 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 Gateway Timeout"></a>504 Gateway Timeout</h4><p>​    作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p>
<p>​    注意：某些代理服务器在DNS查询超时时会返回400或者500错误</p>
<h4 id="505-HTTP-Version-Not-Supported"><a href="#505-HTTP-Version-Not-Supported" class="headerlink" title="505 HTTP Version Not Supported"></a>505 HTTP Version Not Supported</h4><p>​    服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>
<h4 id="506-Variant-Also-Negotiates"><a href="#506-Variant-Also-Negotiates" class="headerlink" title="506 Variant Also Negotiates"></a>506 Variant Also Negotiates</h4><p>​    由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p>
<h4 id="507-Insufficient-Storage"><a href="#507-Insufficient-Storage" class="headerlink" title="507 Insufficient Storage"></a>507 Insufficient Storage</h4><p>​    服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV（RFC 4918）</p>
<h4 id="509-Bandwidth-Limit-Exceeded"><a href="#509-Bandwidth-Limit-Exceeded" class="headerlink" title="509 Bandwidth Limit Exceeded"></a>509 Bandwidth Limit Exceeded</h4><p>​    服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</p>
<h4 id="510-Not-Extended"><a href="#510-Not-Extended" class="headerlink" title="510 Not Extended"></a>510 Not Extended</h4><p>​    获取资源所需要的策略并没有没满足。</p>
]]></content>
  </entry>
  <entry>
    <title>GCD (Grand Central Dispatch)</title>
    <url>/2016/01/13/GCD%EF%BC%88Grand%20Central%20Dispatch%EF%BC%89/</url>
    <content><![CDATA[<p>转载自 <a href="https://github.com/ming1016" target="_blank" rel="noopener">戴铭老师</a></p>
<p>文中较详细介绍GCD队列，各种GCD使用方法，实例如何使用Dispatch Source监听系统底层对象，分析不同锁的性能对比，实例GCD死锁情况。 </p>
<p>文中的Demo在这里 <a href="https://github.com/ming1016/GCDDemo" target="_blank" rel="noopener">https://github.com/ming1016/GCDDemo</a> 对着文章试着来调demo体会更深哦，细细嚼消化好🤓</p>
<a id="more"></a>



<blockquote>
<p>官方文档：</p>
<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/" target="_blank" rel="noopener">https://developer.apple.com/library/prerelease/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/</a></p>
<p>GCD属于系统级的线程管理，在Dispatch queue中执行需要执行的任务性能非常的高。 GCD这块已经开源，地址<a href="http://libdispatch.macosforge.org" target="_blank" rel="noopener">http://libdispatch.macosforge.org</a>。</p>
<p><strong>GCD中的FIFO（先进先出）队列称为dispatch queue，用来保证先进来的任务先得到执行。</strong></p>
</blockquote>
<h2 id="GCD概要"><a href="#GCD概要" class="headerlink" title="GCD概要"></a>GCD概要</h2><ol>
<li><p>和operation queue一样都是基于队列的并发编程API，他们通过集中管理大家协同使用的线程池。</p>
</li>
<li><p><strong>公开的5个不同队列</strong>：运行在主线程中的main queue，3个不同优先级的后台队列（High Priority Queue，Default Priority Queue，Low Priority Queue），以及一个优先级更低的后台队列Background Priority Queue（用于I/O）。</p>
</li>
<li><p>可创建自定义队列：<strong>串行</strong>或<strong>并列</strong>队列。<strong>自定义一般放在Default Priority Queue和Main Queue里</strong>。</p>
</li>
<li><p>操作是在多线程上还是单线程主要是看队列的类型和执行方法，<strong>并行队列异步执行才能在多线程，并行队列同步执行就只会在主线程执行了</strong>。</p>
</li>
</ol>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="一、-系统标准两个队列"><a href="#一、-系统标准两个队列" class="headerlink" title="一、 系统标准两个队列"></a>一、 系统标准两个队列</h4><p>​    //全局队列，一个并行的队列</p>
<p>​    <code>dispatch_get_global_queue</code></p>
<p>​    //主队列，主线程中的唯一队列，一个串行队列</p>
<p>​    <code>dispatch_get_main_queue</code></p>
<h4 id="二、自定义队列"><a href="#二、自定义队列" class="headerlink" title="二、自定义队列"></a>二、自定义队列</h4><p>​    //串行队列</p>
<p>​    <code>dispatch_queue_create(&quot;com.starming.serialqueue&quot;, DISPATCH_QUEUE_SERIAL)</code></p>
<p>​    //并行队列</p>
<p>​    <code>dispatch_queue_create(&quot;com.starming.concurrentqueue&quot;, DISPATCH_QUEUE_CONCURRENT)</code></p>
<h4 id="三、同步异步线程创建"><a href="#三、同步异步线程创建" class="headerlink" title="三、同步异步线程创建"></a>三、同步异步线程创建</h4><p>​    //同步线程</p>
<p>​    <code>dispatch_sync(..., ^(block))</code></p>
<p>​    //异步线程</p>
<p>​    <code>dispatch_async(..., ^(block))</code></p>
<h2 id="队列（dispatch-queue）"><a href="#队列（dispatch-queue）" class="headerlink" title="队列（dispatch queue）"></a>队列（dispatch queue）</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="一、dispatch-get-global-queue"><a href="#一、dispatch-get-global-queue" class="headerlink" title="一、dispatch_get_global_queue"></a>一、dispatch_get_global_queue</h4><ol>
<li>Serial：又叫private dispatch queues，同时只执行一个任务。Serial queue常用于同步访问特定的资源或数据。 当你创建多个Serial queue时，虽然各自是同步，但serial queue之间是并发执行。 </li>
<li>Main dispatch queue：<strong>全局可用的serial queue</strong>，在应用程序<strong>主线程上</strong>执行任务。</li>
<li>Concurrent：又叫global dispatch queue，可以并发的执行多个任务，<strong>但执行完成顺序是随机的</strong>。系统提供四个全局并发队列，这四个队列有这对应的优先级，<strong>用户是不能够创建全局队列的，只能获取</strong>。 </li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">dipatch_queue_t queue;</span><br><span class="line">queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>



<h4 id="二、dispatch-queue-create"><a href="#二、dispatch-queue-create" class="headerlink" title="二、dispatch_queue_create"></a>二、dispatch_queue_create</h4><ol>
<li>user create queue：创建自己定义的队列，可以用dispatch_queue_create函数。</li>
<li>函数有两个参数，第一个自定义的队列名，第二个参数是队列类型，默认NULL或者 DISPATCH_QUEUE_SERIAL 的是串行，参数为 DISPATCH_QUEUE_CONCURRENT 为并行队列。</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue;</span><br><span class="line">queue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure>



<h4 id="三、队列优先级"><a href="#三、队列优先级" class="headerlink" title="三、队列优先级"></a>三、队列优先级</h4><ol>
<li>自定义队列的优先级：可以通过dipatch_queue_attr_make_with_qos_class或dispatch_set_target_queue方法设置队列的优先级</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dipatch_queue_attr_make_with_qos_class</span></span><br><span class="line">dispatch_queue_attr_t attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL, </span><br><span class="line">                                                                     QOS_CLASS_UTILITY, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.qosqueue"</span>, attr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//dispatch_set_target_queue</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.settargetqueue"</span>,</span><br><span class="line">                                               <span class="literal">NULL</span>); <span class="comment">//需要设置优先级的queue</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> referQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, </span><br><span class="line">                                                        <span class="number">0</span>); <span class="comment">//参考优先级</span></span><br><span class="line">dispatch_set_target_queue(queue, referQueue); <span class="comment">//设置queue和referQueue的优先级一样</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>dispatch_set_target_queue：可以设置优先级，也可以设置队列层级体系，比如让多个串行和并行队列在统一一个串行队列里串行执行，如下</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.serialqueue"</span>, </span><br><span class="line">                                                     DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> firstQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.firstqueue"</span>, </span><br><span class="line">                                                    DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> secondQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.secondqueue"</span>, </span><br><span class="line">                                                     DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">dispatch_set_target_queue(firstQueue, serialQueue);</span><br><span class="line">dispatch_set_target_queue(secondQueue, serialQueue);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(firstQueue, ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">  [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">3.</span>f];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(secondQueue, ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">  [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(secondQueue, ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">  [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.</span>f];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="队列类型"><a href="#队列类型" class="headerlink" title="队列类型"></a>队列类型</h3><p><strong>队列默认是串行的，如果设置该参数为NULL会按串行处理，只能执行一个单独的block，队列也可以是并行的，同一时间执行多个block</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span> != <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *label = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.isolation.%p"</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">self</span>];</span><br><span class="line">    <span class="keyword">self</span>.isolationQueue = dispatch_queue_create([label UTF8String], <span class="number">0</span>);</span><br><span class="line">    label = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.work.%p"</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">self</span>];</span><br><span class="line">    <span class="keyword">self</span>.workQueue = dispatch_queue_create([label UTF8String], <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="一、5种队列"><a href="#一、5种队列" class="headerlink" title="一、5种队列"></a>一、5种队列</h4><p>主队列（main queue）, 四种通用调度队列，自己定制的队列。四种通用调度队列为 ：</p>
<ol>
<li><p><strong>QOS_CLASS_USER_INTERACTIVE</strong>：user interactive等级表示任务需要被立即执行提供好的体验，用来更新UI，响应事件等。这个等级最好保持小规模。 </p>
</li>
<li><p><strong>QOS_CLASS_USER_INITIATED</strong>：user initiated等级表示任务由UI发起异步执行。适用场景是需要及时结果同时又可以继续交互的时候。</p>
</li>
<li><p><strong>QOS_CLASS_UTILITY</strong>：utility等级表示需要长时间运行的任务，伴有用户可见进度指示器。经常会用来做计算，I/O，网络，持续的数据填充等任务。这个任务节能。 </p>
</li>
<li><p><strong>QOS_CLASS_BACKGROUND</strong>：background等级表示用户不会察觉的任务，使用它来处理预加载， 或者不需要用户交互和对时间不敏感的任务。 </p>
</li>
</ol>
<p><strong>示例：后台加载显示图片</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">  dispatch_async(dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_USER_INITIATED</span>.value), <span class="number">0</span>)) &#123;</span><br><span class="line">	<span class="comment">// 将工作从主线程转移到全局队列中，这是dispatch_async调用，异步提交保证调用线程会继续执行下去，这样viewDidLoad在主线程上能够更早完成，</span></span><br><span class="line">    <span class="keyword">let</span> overlayImage = <span class="keyword">self</span>.faceOverlayImageFromImage(<span class="keyword">self</span>.image)</span><br><span class="line">		dispatch_async(dispatch_get_main_queue()) &#123;</span><br><span class="line">      <span class="comment">// 新图完成，把一个闭包加入主线程用来更新UIImageView，只有在主线程能操作UIKit。</span></span><br><span class="line">      <span class="keyword">self</span>.fadeInNewImage(overlayImage) <span class="comment">// 更新UI</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="二、何时使用何种队列类型"><a href="#二、何时使用何种队列类型" class="headerlink" title="二、何时使用何种队列类型"></a>二、何时使用何种队列类型</h4><ol>
<li>主队列（顺序）：<strong>队列中有任务完成需要更新UI时，dispatch_after在这种类型中使用</strong>。</li>
<li>并发队列：<strong>用来执行与UI无关的后台任务</strong>，dispatch_sync放在这里，方便等待任务，完成进行后续处理或和dispatch barrier同步。dispatch groups放在这里也不错。</li>
<li>自定义顺序队列：顺序执行后台任务并追踪它时。这样做同时只有一个任务在执行可以防止资源竞争。dipatch barriers解决读写锁问题的放在这里处理。dispatch groups也是放在这里。 </li>
</ol>
<h4 id="三、QoS等级参数的写法"><a href="#三、QoS等级参数的写法" class="headerlink" title="三、QoS等级参数的写法"></a>三、QoS等级参数的写法</h4><p>可以使用下面的方法简化QoS等级参数的写法 </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">GlobalMainQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_main_queue()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalUserInteractiveQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_USER_INTERACTIVE</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalUserInitiatedQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_USER_INITIATED</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalUtilityQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_UTILITY</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalBackgroundQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_BACKGROUND</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用起来就是这样，易读而且容易看出在使用哪个队列</span></span><br><span class="line">dispatch_async(<span class="type">GlobalUserInitiatedQueue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> overlayImage = <span class="keyword">self</span>.faceOverlayImageFromImage(<span class="keyword">self</span>.image)</span><br><span class="line">  dispatch_async(<span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.fadeInNewImage(overlayImage)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="简单使用和介绍"><a href="#简单使用和介绍" class="headerlink" title="简单使用和介绍"></a>简单使用和介绍</h3><h4 id="一、dispatch-once用法"><a href="#一、dispatch-once用法" class="headerlink" title="一、dispatch_once用法"></a>一、dispatch_once用法</h4><p>​    <strong>dispatch_once_t 要是全局或static变量，保证dispatch_once_t只有一份实例</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIColor</span> *)boringColor &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">UIColor</span> *color;</span><br><span class="line">  <span class="comment">//只运行一次</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    color = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">0.380</span>f green:<span class="number">0.376</span>f blue:<span class="number">0.376</span>f alpha:<span class="number">1.000</span>f];</span><br><span class="line">	&#125;);</span><br><span class="line">  <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二、dispatch-async"><a href="#二、dispatch-async" class="headerlink" title="二、dispatch_async"></a>二、dispatch_async</h4><p>​    设计一个异步的API调用dispatch_async()，这个调用放在API的方法或函数中做。让API的使用者设置一个回调处理队列。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)processImage:(<span class="built_in">UIImage</span> \*)image completionHandler:(<span class="keyword">void</span>(^)(<span class="built_in">BOOL</span> success))handler &#123;</span><br><span class="line">  <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.isolationQueue, ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">    <span class="comment">// do actual processing here</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.resultQueue, ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">      handler(<span class="literal">YES</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>豆瓣中数据加载的时候用到的就是这种方法，数据处理中使用</p>
<p><strong>可以避免界面会被一些耗时的操作卡死，比如读取网络数据，大数据IO，还有大量数据的数据库读写，这时需要在另一个线程中处理，然后通知主线程更新界面，GCD使用起来比NSThread和NSOperation方法要简单方便。</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码框架</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">  <span class="comment">// 耗时的操作</span></span><br><span class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="comment">// 更新界面</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载图片的示例</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">  <span class="built_in">NSURL</span> * url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"&lt;http://avatar.csdn.net/2/C/D/1_totogo2010.jpg&gt;"</span>];</span><br><span class="line">  <span class="built_in">NSData</span> * data = [[<span class="built_in">NSData</span> alloc]initWithContentsOfURL:url];</span><br><span class="line">  <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc]initWithData:data];</span><br><span class="line">  <span class="keyword">if</span> (data != <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">      <span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="三、dispatch-after延后执行"><a href="#三、dispatch-after延后执行" class="headerlink" title="三、dispatch_after延后执行"></a>三、dispatch_after延后执行</h4><p><strong>dispatch_after只是延时提交block，不是延时立刻执行。</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)foo &#123;</span><br><span class="line">  <span class="keyword">double</span> delayInSeconds = <span class="number">2.0</span>;</span><br><span class="line">  dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, </span><br><span class="line">                                          (int64_t) (delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>));</span><br><span class="line">  dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">    [<span class="keyword">self</span> bar];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>范例，实现一个推迟出现弹出框提示，比如说提示用户评价等功能。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showOrHideNavPrompt</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> delayInSeconds = <span class="number">1.0</span></span><br><span class="line">  <span class="keyword">let</span> popTime = dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>,</span><br><span class="line">                              <span class="type">Int64</span>(delayInSeconds \* <span class="type">Double</span>(<span class="type">NSEC_PER_SEC</span>))) <span class="comment">// 在这里声明推迟的时间</span></span><br><span class="line">  dispatch_after(popTime, <span class="type">GlobalMainQueue</span>) &#123; <span class="comment">// 等待delayInSeconds将闭包异步到主队列</span></span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">count</span> = <span class="type">PhotoManager</span>.sharedManager.photos.<span class="built_in">count</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.navigationItem.prompt = <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.navigationItem.prompt = <span class="string">"Add photos with faces to Googlyify them!"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子中的dispatch time的参数，可以先看看函数原型 </p>
<p><code>dispatch_time_t dispatch_time ( dispatch_time_t when, int64_t delta );</code></p>
<p>第一个参数为DISPATCH_TIME_NOW表示当前。第二个参数的delta表示纳秒，一秒对应的纳秒为1000000000，系统提供了一些宏来简化 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSEC_PER_SEC 1000000000ull <span class="comment">//每秒有多少纳秒</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USEC_PER_SEC 1000000ull <span class="comment">//每秒有多少毫秒</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSEC_PER_USEC 1000ull <span class="comment">//每毫秒有多少纳秒</span></span></span><br></pre></td></tr></table></figure>

<p>这样如果要表示一秒就可以这样写 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">dispatch_time(DISPATCH_TIME_NOW, <span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>);</span><br><span class="line">dispatch_time(DISPATCH_TIME_NOW, <span class="number">1000</span> * USEC_PER_SEC);</span><br><span class="line">dispatch_time(DISPATCH_TIME_NOW, USEC_PER_SEC * <span class="built_in">NSEC_PER_USEC</span>);</span><br></pre></td></tr></table></figure>



<h4 id="四、dispatch-barrier-async使用Barrier-Task方法"><a href="#四、dispatch-barrier-async使用Barrier-Task方法" class="headerlink" title="四、dispatch_barrier_async使用Barrier Task方法"></a>四、dispatch_barrier_async使用Barrier Task方法</h4><ol>
<li>Dispatch Barrier解决多线程并发读写同一个资源发生死锁</li>
<li>Dispatch Barrier确保提交的闭包是指定队列中在特定时段唯一在执行的一个。 </li>
<li>在所有先于Dispatch Barrier的任务都完成的情况下这个闭包才开始执行。 </li>
<li>轮到这个闭包时barrier会执行这个闭包并且确保队列在此过程不会执行其它任务。 </li>
<li>闭包完成后 队列恢复。 </li>
<li><strong>需要注意dispatch_barrier_async只在自己创建的队列上有这种作用，在全局并发队列和串行队列上，效果和 dispatch_sync一样</strong></li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建队列</span></span><br><span class="line"><span class="keyword">self</span>.isolationQueue = dispatch_queue_create([label UTF8String], DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"><span class="comment">//改变setter</span></span><br><span class="line">- (<span class="keyword">void</span>)setCount:(<span class="built_in">NSUInteger</span>)count forKey:(<span class="built_in">NSString</span> \*)key &#123;</span><br><span class="line">  key = [key <span class="keyword">copy</span>];</span><br><span class="line">  <span class="comment">//确保所有barrier都是async异步的</span></span><br><span class="line">  dispatch_barrier_async(<span class="keyword">self</span>.isolationQueue, ^()&#123;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">      [<span class="keyword">self</span>.counts removeObjectForKey:key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.counts[key] = @(count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dispatchBarrierAsyncDemo &#123;</span><br><span class="line">    <span class="comment">//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> dataQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.dataqueue"</span>,</span><br><span class="line">                                                       DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"read data 1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"read data 2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//等待前面的都完成，在执行barrier后面的</span></span><br><span class="line">    dispatch_barrier_async(dataQueue, ^&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"write data 1"</span>);</span><br><span class="line">      [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.</span>f];</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"read data 3"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"read data 4"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>swift示例</strong></p>
<p>使用dispatch_queue_create初始化一个并发队列。第一个参数遵循<strong>反向DNS命名习惯</strong>，方便描述，第二个参数是指出是并发还是顺序。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> concurrentPhotoQueue = dispatch_queue_create(<span class="string">"com.raywenderlich.GooglyPuff.photoQueue"</span>, <span class="type">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addPhoto</span><span class="params">(photo: Photo)</span></span> &#123;</span><br><span class="line">  dispatch_barrier_async(concurrentPhotoQueue) &#123;</span><br><span class="line">    <span class="comment">// 将写操作加入到自定义的队列。开始执行时这个就是队列中唯一的一个在执行的任务。</span></span><br><span class="line">    <span class="keyword">self</span>._photos.append(photo) </span><br><span class="line">    <span class="comment">// barrier能够保障不会和其他任务同时进行。</span></span><br><span class="line">    dispatch_async(<span class="type">GlobalMainQueue</span>) &#123; </span><br><span class="line">      <span class="comment">// 涉及到UI所以这个通知应该在主线程中，所以分派另一个异步任务到主队列中。</span></span><br><span class="line">      <span class="keyword">self</span>.postContentAddedNotification()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是解决了写可能发生死锁，下面是使用dispatch_sync解决读时可能会发生的死锁。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> photos: [<span class="type">Photo</span>] &#123;</span><br><span class="line">  <span class="keyword">var</span> photosCopy: [<span class="type">Photo</span>]!</span><br><span class="line">  dispatch_sync(concurrentPhotoQueue) &#123; <span class="comment">// 同步调度到concurrentPhotoQueue队列执行读操作</span></span><br><span class="line">    photosCopy = <span class="keyword">self</span>._photos <span class="comment">// 保存</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> photosCopy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样读写问题都解决了。都用异步处理避免死锁，异步的缺点在于调试不方便，但是比起同步容易产生死锁这个副作用还算小的。</p>
<h4 id="五、dispatch-apply进行快速迭代"><a href="#五、dispatch-apply进行快速迭代" class="headerlink" title="五、dispatch_apply进行快速迭代"></a>五、dispatch_apply进行快速迭代</h4><p>类似for循环，但是在并发队列的情况下dispatch_apply会并发执行block任务。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (size_t y = <span class="number">0</span>; y &lt; height; ++y) &#123;</span><br><span class="line">  <span class="keyword">for</span> (size_t x = <span class="number">0</span>; x &lt; width; ++x) &#123;</span><br><span class="line">    <span class="comment">// Do something with x and y here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为可以并行执行，所以使用dispatch_apply可以运行的更快 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchApplyDemo &#123;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurre</span></span><br><span class="line"><span class="string">    dispatch_apply(10, concurrentQueue, ^(size_t i) &#123;</span></span><br><span class="line"><span class="string">        NSLog(@"</span>%zu<span class="string">",i);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    NSLog(@"</span>The end<span class="string">");**</span></span><br><span class="line"><span class="string">    //这里有个需要注意的是，dispatch_apply这个是会阻塞主线程的。这个log打印会在dispatch_apply都结束后才开始执行</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>dispatch_apply能避免线程爆炸，因为GCD会管理并发</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dealWiththreadWithMaybeExplode:(<span class="built_in">BOOL</span>)explode &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">  <span class="keyword">if</span> (explode) &#123;</span><br><span class="line">    <span class="comment">//有问题的情况，可能会死锁</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">999</span> ; i++) &#123;</span><br><span class="line">      <span class="built_in">dispatch_async</span>(concurrentQueue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"wrong %d"</span>,i);</span><br><span class="line">        <span class="comment">//do something hard</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//会优化很多，能够利用GCD管理</span></span><br><span class="line">    dispatch_apply(<span class="number">999</span>, concurrentQueue, ^(size_t i)&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"correct %zu"</span>,i);</span><br><span class="line">      <span class="comment">//do something hard</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>swift示例： </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span><span class="params">(completion: BatchPhotoDownloadingCompletionClosure?)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> storedError: <span class="type">NSError!</span></span><br><span class="line">  <span class="keyword">var</span> downloadGroup = dispatch_group_create()</span><br><span class="line">  <span class="keyword">let</span> addresses = [<span class="type">OverlyAttachedGirlfriendURLString</span>, </span><br><span class="line">                   <span class="type">SuccessKidURLString</span>,</span><br><span class="line">                   <span class="type">LotsOfFacesURLString</span>]</span><br><span class="line">  dispatch_apply(<span class="type">UInt</span>(addresses.<span class="built_in">count</span>), <span class="type">GlobalUserInitiatedQueue</span>) &#123;</span><br><span class="line">    i <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="type">Int</span>(i)</span><br><span class="line">    <span class="keyword">let</span> address = addresses[index]</span><br><span class="line">    <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: address)</span><br><span class="line">    dispatch_group_enter(downloadGroup)</span><br><span class="line">    <span class="keyword">let</span> photo = <span class="type">DownloadPhoto</span>(url: url!) &#123;</span><br><span class="line">      image, error <span class="keyword">in</span> </span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">        storedError = error</span><br><span class="line">      &#125;</span><br><span class="line">      dispatch_group_leave(downloadGroup)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch_group_notify(downloadGroup, <span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> completion = completion &#123;</span><br><span class="line">      completion(error: storedError)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="六、Block组合Dispatch-groups"><a href="#六、Block组合Dispatch-groups" class="headerlink" title="六、Block组合Dispatch_groups"></a>六、Block组合Dispatch_groups</h4><p>dispatch groups是专门用来监视多个异步任务。dispatch_group_t实例用来追踪不同队列中的不同任务。</p>
<p>当group里所有事件都完成GCD API有两种方式发送通知: </p>
<ul>
<li>第一种是dispatch_group_wait，会阻塞当前进程，等所有任务都完成或等待超时。 </li>
<li>第二种方法是使用dispatch_group_notify，异步执行闭包，不会阻塞。 </li>
</ul>
<ol>
<li>第一种使用dispatch_group_wait的swift的例子： </li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span><span class="params">(completion: BatchPhotoDownloadingCompletionClosure?)</span></span> &#123;</span><br><span class="line">  dispatch_async(<span class="type">GlobalUserInitiatedQueue</span>) &#123;</span><br><span class="line">    <span class="comment">// 因为dispatch_group_wait会租塞当前进程，所以要使用dispatch_async将整个方法要放到后台队列才能够保证主线程不被阻塞</span></span><br><span class="line">    <span class="keyword">var</span> storedError: <span class="type">NSError!</span></span><br><span class="line">    <span class="keyword">var</span> downloadGroup = dispatch_group_create() <span class="comment">// 创建一个dispatch group</span></span><br><span class="line">    <span class="keyword">let</span> addresses = [<span class="type">OverlyAttachedGirlfriendURLString</span>,</span><br><span class="line">                     <span class="type">SuccessKidURLString</span>,</span><br><span class="line">                     <span class="type">LotsOfFacesURLString</span>]</span><br><span class="line">    <span class="keyword">for</span> address <span class="keyword">in</span> addresses &#123;</span><br><span class="line">      <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: address)</span><br><span class="line">      dispatch_group_enter(downloadGroup)</span><br><span class="line">        <span class="comment">// dispatch_group_enter是通知dispatch group任务开始了，dispatch_group_enter和dispatch_group_leave是成对调用，不然程序就崩溃了。</span></span><br><span class="line">      <span class="keyword">let</span> photo = <span class="type">DownloadPhoto</span>(url: url!) &#123;</span><br><span class="line">        image, error <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">          storedError = error</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_group_leave(downloadGroup) </span><br><span class="line">        <span class="comment">// 保持和dispatch_group_enter配对。通知任务已经完成</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch_group_wait(downloadGroup, <span class="type">DISPATCH_TIME_FOREVER</span>)</span><br><span class="line">    <span class="comment">// dispatch_group_wait等待所有任务都完成直到超时。如果任务完成前就超时了，函数会返回一个非零值，可以通过返回值判断是否超时。也可以用DISPATCH_TIME_FOREVER表示一直等。</span></span><br><span class="line">    dispatch_async(<span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里可以保证所有图片任务都完成，然后在main queue里加入完成后要处理的闭包，会在main queue里执行。</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> completion = completion &#123; <span class="comment">// 执行闭包内容</span></span><br><span class="line">        completion(error: storedError)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  oc例子</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchGroupWaitDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">  dispatch_group_t group = dispatch_group_create();</span><br><span class="line">  <span class="comment">//在group中添加队列的block</span></span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"go on"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二种使用dispatch_group_notify的<strong>swift</strong>的例子： </li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span><span class="params">(completion: BatchPhotoDownloadingCompletionClosure?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不用加dispatch_async，因为没有阻塞主进程</span></span><br><span class="line">  <span class="keyword">var</span> storedError: <span class="type">NSError!</span></span><br><span class="line">  <span class="keyword">var</span> downloadGroup = dispatch_group_create()</span><br><span class="line">  <span class="keyword">for</span> address <span class="keyword">in</span> [<span class="type">OverlyAttachedGirlfriendURLString</span>,</span><br><span class="line">                  <span class="type">SuccessKidURLString</span>,</span><br><span class="line">                  <span class="type">LotsOfFacesURLString</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: address)</span><br><span class="line">    dispatch_group_enter(downloadGroup)</span><br><span class="line">    <span class="keyword">let</span> photo = <span class="type">DownloadPhoto</span>(url: url!) &#123;</span><br><span class="line">      image, error <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">        storedError = error</span><br><span class="line">      &#125;</span><br><span class="line">      dispatch_group_leave(downloadGroup)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch_group_notify(downloadGroup, <span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">    <span class="comment">// dispatch_group_notify和dispatch_group_wait的区别就是是异步执行闭包的，当dispatch groups中没有剩余的任务时闭包才执行。这里是指明在主队列中执行。</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> completion = completion &#123;</span><br><span class="line">      completion(error: storedError)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>oc例子：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dispatch_group_notify</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchGroupNotifyDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">  dispatch_group_t group = dispatch_group_create();</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"end"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"can continue"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dispatch_group_wait</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchGroupWaitDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">  dispatch_group_t group = dispatch_group_create();</span><br><span class="line">  <span class="comment">//在group中添加队列的block</span></span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"can continue"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如何对现有API使用dispatch_group_t </li>
</ol>
<p>给Core Data的-performBlock:添加groups。组合完成任务后使用dispatch_group_notify来运行一个block即可。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)withGroup:(dispatch_group_t)group performBlock:(dispatch_block_t)block &#123;</span><br><span class="line">  <span class="keyword">if</span> (group == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    [<span class="keyword">self</span> performBlock:block];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    [<span class="keyword">self</span> performBlock:^()&#123;</span><br><span class="line">      block();</span><br><span class="line">      dispatch_group_leave(group);</span><br><span class="line">    &#125;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NSURLConnection也可以这样做</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)withGroup:(dispatch_group_t)group sendAsynchronousRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">            queue:(<span class="built_in">NSOperationQueue</span> *)queue completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span>*, <span class="built_in">NSData</span>*, <span class="built_in">NSError</span>*))handler &#123;</span><br><span class="line">    <span class="keyword">if</span> (group == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> sendAsynchronousRequest:request queue:queue completionHandler:handler];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dispatch_group_enter(group);</span><br><span class="line">        [<span class="keyword">self</span> sendAsynchronousRequest:request</span><br><span class="line">                                queue:queue</span><br><span class="line">                    completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error)&#123;</span><br><span class="line">            handler(response, data, error);</span><br><span class="line">            dispatch_group_leave(group);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意事项：</code> </p>
<ul>
<li>dispatch_group_async 等价于 dispatch_group_enter() 和 dispatch_group_leave() 的组合。 </li>
<li>dispatch_group_enter() 必须运行在 dispatch_group_leave() 之前。 </li>
<li>dispatch_group_enter() 和 dispatch_group_leave() 需要成对出现的 </li>
</ul>
<h4 id="七、Dispatch-Block"><a href="#七、Dispatch-Block" class="headerlink" title="七、Dispatch Block"></a>七、Dispatch Block</h4><p>​    队列执行任务都是block的方式</p>
<ol>
<li><h5 id="dispatch-block-t-创建block"><a href="#dispatch-block-t-创建block" class="headerlink" title="dispatch_block_t 创建block"></a>dispatch_block_t 创建block</h5></li>
</ol>
<ul>
<li><pre><code class="objc">- (<span class="keyword">void</span>)createDispatchBlock {
  <span class="comment">//normal way</span>
  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.concurrentqueue"</span>,DISPATCH_QUEUE_CONCURRENT);

  dispatch_block_t block = dispatch_block_create(<span class="number">0</span>, ^{
    <span class="built_in">NSLog</span>(<span class="string">@"run block"</span>);
  });
  <span class="built_in">dispatch_async</span>(concurrentQueue, block);
  <span class="comment">//QOS way</span>
  dispatch_block_t qosBlock = dispatch_block_create_with_qos_class(<span class="number">0</span>, QOS_CLASS_USER_INITIATED, <span class="number">-1</span>, ^{
    <span class="built_in">NSLog</span>(<span class="string">@"run qos block"</span>);
  });
  <span class="built_in">dispatch_async</span>(concurrentQueue, qosBlock);
}
&lt;!--￼<span class="number">27</span>--&gt;


</code></pre>
</li>
</ul>
<ol start="3">
<li><h5 id="dispatch-block-notify"><a href="#dispatch-block-notify" class="headerlink" title="dispatch_block_notify"></a>dispatch_block_notify</h5><p>可以监视指定dispatch block结束，然后再加入一个block到队列中。 </p>
<p>三个参数分别为，第一个是需要监视的block，第二个参数是需要提交执行的队列，第三个是待加入到队列中的block </p>
</li>
</ol>
<ul>
<li><pre><code class="objc">- (<span class="keyword">void</span>)dispatchBlockNotifyDemo {
  <span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.serialqueue"</span>, DISPATCH_QUEUE_SERIAL);
  dispatch_block_t firstBlock = dispatch_block_create(<span class="number">0</span>, ^{
    <span class="built_in">NSLog</span>(<span class="string">@"first block start"</span>);
    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];
    <span class="built_in">NSLog</span>(<span class="string">@"first block end"</span>);
  });
  <span class="built_in">dispatch_async</span>(serialQueue, firstBlock);
  dispatch_block_t secondBlock = dispatch_block_create(<span class="number">0</span>, ^{
    <span class="built_in">NSLog</span>(<span class="string">@"second block run"</span>);
  });
  <span class="comment">//first block执行完才在serial queue中执行second block</span>
  dispatch_block_notify(firstBlock, serialQueue, secondBlock);
}
&lt;!--￼<span class="number">28</span>--&gt;


</code></pre>
</li>
</ul>
<ol start="5">
<li><h5 id="使用dispatch-block-object（调度块）在任务执行前进行取消"><a href="#使用dispatch-block-object（调度块）在任务执行前进行取消" class="headerlink" title="使用dispatch block object（调度块）在任务执行前进行取消"></a>使用dispatch block object（调度块）在任务执行前进行取消</h5><p>dispatch block object可以为队列中的对象设置 </p>
<p>示例，下载图片中途进行取消 </p>
</li>
</ol>
<ul>
<li><pre><code class="swift"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span><span class="params">(completion: BatchPhotoDownloadingCompletionClosure?)</span></span> {

  <span class="keyword">var</span> storedError: <span class="type">NSError!</span>
  <span class="keyword">let</span> downloadGroup = dispatch_group_create()
  <span class="keyword">var</span> addresses = [<span class="type">OverlyAttachedGirlfriendURLString</span>,
                   <span class="type">SuccessKidURLString</span>,
                   <span class="type">LotsOfFacesURLString</span>]
  addresses += addresses + addresses <span class="comment">// 扩展address数组，复制3份</span>
  <span class="keyword">var</span> blocks: [dispatch_block_t] = [] <span class="comment">// 一个保存block的数组</span>
     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; addresses.<span class="built_in">count</span> {
    dispatch_group_enter(downloadGroup)
    <span class="keyword">let</span> block = dispatch_block_create(<span class="type">DISPATCH_BLOCK_INHERIT_QOS_CLASS</span>) {
      <span class="comment">// 创建一个block，block的标志是DISPATCH_BLOCK_INHERIT_QOS_CLASS</span>
      <span class="keyword">let</span> index = <span class="type">Int</span>(i)
      <span class="keyword">let</span> address = addresses[index]
      <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: address)
      <span class="keyword">let</span> photo = <span class="type">DownloadPhoto</span>(url: url!) {
        image, error <span class="keyword">in</span>
        <span class="keyword">if</span> <span class="keyword">let</span> error = error {
          storedError = error
        }
        dispatch_group_leave(downloadGroup)
      }
      <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)
    }
    blocks.append(block)
    dispatch_async(<span class="type">GlobalMainQueue</span>, block)
    <span class="comment">// 把这个block放到GlobalMainQueue上异步调用。因为全局队列是一个顺序队列所以方便取消对象block，同时可以保证下载任务在downloadPhotosWithCompletion返回后才开始执行。</span>
  }
  <span class="keyword">for</span> block <span class="keyword">in</span> blocks[<span class="number">3</span> ..&lt; blocks.<span class="built_in">count</span>] {
    <span class="keyword">let</span> cancel = arc4random_uniform(<span class="number">2</span>) <span class="comment">// 随机返回一个整数，会返回0或1</span>
    <span class="keyword">if</span> cancel == <span class="number">1</span> {
      dispatch_block_cancel(block)
      <span class="comment">// 如果是1就取消block，这个只能发生在block还在队列中并没有开始的情况下。因为把block已经放到了GlobalMainQueue中，所以这个地方会先执行，执行完了才会执行block。</span>
      <span class="comment">// 因为已经dispatch_group_enter了，所以取消时也要将其都leave掉。</span>
      dispatch_group_leave(downloadGroup)       
    }
  }
  dispatch_group_notify(downloadGroup, <span class="type">GlobalMainQueue</span>) {
    <span class="keyword">if</span> <span class="keyword">let</span> completion = completion {
      completion(error: storedError)
    }
  }
}
&lt;!--￼<span class="number">29</span>--&gt;</code></pre>
</li>
</ul>
<ul>
<li>dispatch_io_create：创建dispatch io 。</li>
<li>dispatch_io_set_low_water：指定切割文件大小 。</li>
<li>dispatch_io_read：读取切割的文件然后合并。 </li>
</ul>
<blockquote>
<p>苹果系统日志API里用到了这个技术，可以在这里查看： </p>
<p><a href="https://github.com/Apple-FOSS-Mirror/Libc/blob/2ca2ae74647714acfc18674c3114b1a5d3325d7d/gen/asl.c" target="_blank" rel="noopener">https://github.com/Apple-FOSS-Mirror/Libc/blob/2ca2ae74647714acfc18674c3114b1a5d3325d7d/gen/asl.c</a></p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">pipe_q = dispatch_queue_create(<span class="string">"PipeQ"</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line">pipe_channel = dispatch_io_create(DISPATCH_IO_STREAM, fd, pipe_q, ^(<span class="keyword">int</span> err)&#123;</span><br><span class="line">  close(fd);</span><br><span class="line">&#125;);</span><br><span class="line">*out_fd = fdpair[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置切割大小</span></span><br><span class="line">dispatch_io_set_low_water(pipe_channel, SIZE_MAX);</span><br><span class="line">dispatch_io_read(pipe_channel, <span class="number">0</span>, SIZE_MAX, pipe_q, ^(<span class="keyword">bool</span> done, dispatch_data_t pipedata, <span class="keyword">int</span> err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err == <span class="number">0</span>) &#123;</span><br><span class="line">    size_t len = dispatch_data_get_size(pipedata);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//对每次切块数据的处理</span></span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">char</span> *bytes = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">char</span> *encoded;</span><br><span class="line">      uint32_t eval;</span><br><span class="line">      dispatch_data_t md = dispatch_data_create_map(pipedata, </span><br><span class="line">                                                    (<span class="keyword">const</span> <span class="keyword">void</span> **)&amp;bytes, </span><br><span class="line">                                                    &amp;len);</span><br><span class="line">      encoded = asl_core_encode_buffer(bytes, len);</span><br><span class="line">      asl_msg_set_key_val(aux, ASL_KEY_AUX_DATA, encoded);</span><br><span class="line">      free(encoded);</span><br><span class="line">      eval = _asl_evaluate_send(<span class="literal">NULL</span>, (aslmsg)aux, <span class="number">-1</span>);</span><br><span class="line">      _asl_send_message(<span class="literal">NULL</span>, eval, aux, <span class="literal">NULL</span>);</span><br><span class="line">      asl_msg_release(aux);</span><br><span class="line">      dispatch_release(md);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (done) &#123;</span><br><span class="line">    <span class="comment">//semaphore +1使得不需要再等待继续执行下去。</span></span><br><span class="line">    dispatch_semaphore_signal(sem);</span><br><span class="line">    dispatch_release(pipe_channel);</span><br><span class="line">    dispatch_release(pipe_q);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="九、Dispatch-Source-用GCD监视进程"><a href="#九、Dispatch-Source-用GCD监视进程" class="headerlink" title="九、Dispatch Source 用GCD监视进程"></a>九、Dispatch Source 用GCD监视进程</h4><p>Dispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表 </p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DISPATCH_SOURCE_TYPE_DATA_ADD</td>
<td align="center">数据增加</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_DATA_OR</td>
<td align="center">数据OR</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_MACH_SEND</td>
<td align="center">Mach端口发送</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_MACH_RECV</td>
<td align="center">Mach端口接收</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_MEMORYPRESSURE</td>
<td align="center">内存情况</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_PROC</td>
<td align="center">进程事件</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_READ</td>
<td align="center">读数据</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_SIGNAL</td>
<td align="center">信号</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_TIMER</td>
<td align="center">定时器</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_VNODE</td>
<td align="center">文件系统变化</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_WRITE</td>
<td align="center">文件写入</td>
</tr>
</tbody></table>
<p>方法 </p>
<ul>
<li>dispatch_source_create：创建 dispatch source ，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。 </li>
<li>dispatch_source_set_event_handler：设置事件处理 handler </li>
<li>dispatch_source_set_cancel_handler：事件取消handler，就是在 dispatch source 释放前做些清理的事。 </li>
<li>dispatch_source_cancel：关闭 dispatch source，设置的事件处理 handler 不会被执行，已经执行的事件handler不会取消。 </li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSRunningApplication</span> *mail = [<span class="built_in">NSRunningApplication</span> runningApplicationsWithBundleIdentifier:<span class="string">@"com.apple.mail"</span>];</span><br><span class="line"><span class="keyword">if</span> (mail == <span class="literal">nil</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid_t <span class="keyword">const</span> pid = mail.processIdentifier;</span><br><span class="line"><span class="keyword">self</span>.source = dispatch_source_create(DISPATCH_SOURCE_TYPE_PROC, pid, </span><br><span class="line">                                     DISPATCH_PROC_EXIT, </span><br><span class="line">                                     DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class="line">dispatch_source_set_event_handler(<span class="keyword">self</span>.source, ^()&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"Mail quit."</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在事件源传到你的事件处理前需要调用dispatch_resume()这个方法</span></span><br><span class="line">dispatch_resume(<span class="keyword">self</span>.source);</span><br></pre></td></tr></table></figure>



<p>监视文件夹内文件变化 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *directoryURL; <span class="comment">// assume this is set to a directory</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">char</span> buffer[<span class="number">80</span>];</span><br><span class="line">	strerror_r(errno, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"Unable to open "</span>%<span class="string">@": %s (%d)"</span>, [directoryURL path], buffer, errno);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, </span><br><span class="line">                                                  fd,</span><br><span class="line">                                                  DISPATCH_VNODE_WRITE | </span><br><span class="line">                                                  DISPATCH_VNODE_DELETE, </span><br><span class="line">                                                  DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class="line"></span><br><span class="line">dispatch_source_set_event_handler(source, ^()&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> data = dispatch_source_get_data(source);</span><br><span class="line">	<span class="keyword">if</span> (data &amp; DISPATCH_VNODE_WRITE) &#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"The directory changed."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (data &amp; DISPATCH_VNODE_DELETE) &#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"The directory has been deleted."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_source_set_cancel_handler(source, ^()&#123;</span><br><span class="line">	close(fd);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.source = source;</span><br><span class="line">dispatch_resume(<span class="keyword">self</span>.source);</span><br></pre></td></tr></table></figure>

<p><strong>还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听</strong></p>
<p>NSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为 NSRunLoopCommonModes的runloop， 如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer，如下。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,</span><br><span class="line">                                                  <span class="number">0</span>, </span><br><span class="line">                                                  <span class="number">0</span>, </span><br><span class="line">                                                  DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class="line"></span><br><span class="line">dispatch_source_set_event_handler(source, ^()&#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"Time flies."</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_time_t start</span><br><span class="line">dispatch_source_set_timer(source, </span><br><span class="line">                          DISPATCH_TIME_NOW, </span><br><span class="line">                          <span class="number">5</span>ull * <span class="built_in">NSEC_PER_SEC</span>,</span><br><span class="line">                          <span class="number">100</span>ull * <span class="built_in">NSEC_PER_MSEC</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.source = source;</span><br><span class="line">dispatch_resume(<span class="keyword">self</span>.source);</span><br></pre></td></tr></table></figure>



<h4 id="十、Dispatch-Semaphore和的介绍"><a href="#十、Dispatch-Semaphore和的介绍" class="headerlink" title="十、Dispatch Semaphore和的介绍"></a>十、Dispatch Semaphore和的介绍</h4><p>另外一种保证同步的方法。使用 dispatch_semaphore_signal 加1 dispatch_semaphore_wait 减1，为0时等待的设置方式来达到线程同步的目的和 同步锁一样能够解决资源抢占的问题。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dispatch semaphore</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchSemaphoreDemo &#123;</span><br><span class="line">  <span class="comment">//创建semaphore</span></span><br><span class="line">	dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</span><br><span class="line">	[<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.</span>f];</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"semaphore +1"</span>);</span><br><span class="line">	dispatch_semaphore_signal(semaphore); <span class="comment">//+1 semaphore</span></span><br><span class="line">    </span><br><span class="line">	&#125;);</span><br><span class="line">	dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"continue"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="十一、锁"><a href="#十一、锁" class="headerlink" title="十一、锁"></a>十一、锁</h4><p>这里简单介绍下iOS中常用的各种锁和他们的性能。 </p>
<ul>
<li>NSRecursiveLock：递归锁，可以在一个线程中反复获取锁不会造成死锁，这个过程会记录获取锁和释放锁的次数来达到何时释放的作用。 </li>
<li>NSDistributedLock：分布锁，基于文件方式的锁机制，可以跨进程访问。 </li>
<li>NSConditionLock：条件锁，用户定义条件，确保一个线程可以获取满足一定条件的锁。 因为线程间竞争会涉及到条件锁检测，系统调用上下切换频繁导致耗时是几个锁里最长的。 </li>
<li>OSSpinLock：自旋锁，不进入内核，减少上下文切换，性能最高，但抢占多时会占用较多cpu，好点多，这时使用pthread_mutex较好。 </li>
<li>pthread_mutex_t：同步锁基于C语言，底层api性能高，使用方法和其它的类似。 </li>
<li>@synchronized：更加简单。 </li>
</ul>
<h4 id="十二、dispatch-suspend和dispatch-resume挂起和恢复队列"><a href="#十二、dispatch-suspend和dispatch-resume挂起和恢复队列" class="headerlink" title="十二、dispatch_suspend和dispatch_resume挂起和恢复队列"></a>十二、dispatch_suspend和dispatch_resume挂起和恢复队列</h4><p>dispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。 </p>
<h4 id="十三、dispatch-set-context和dispatch-get-context"><a href="#十三、dispatch-set-context和dispatch-get-context" class="headerlink" title="十三、dispatch_set_context和dispatch_get_context"></a>十三、dispatch_set_context和dispatch_get_context</h4><p>?</p>
<h2 id="GCD深入操作"><a href="#GCD深入操作" class="headerlink" title="GCD深入操作"></a>GCD深入操作</h2><ul>
<li>缓冲区：dispatch_data_t 基于零碎的内存区域，使用 dispatch_data_apply 来遍历，还可以用 dispatch_data_create_subrange 来创建一个不做任何拷贝的子区域 </li>
<li>I/O调度：使用GCD提供的dispatch_io_read，dispatch_io_write和dispatch_io_close </li>
<li>测试：使用 dispatch_benchmark 小工具 </li>
<li>原子操作： libkern/OSAtomic.h 里可以查看那些函数，用于底层多线程编程。 </li>
</ul>
<h3 id="GCD死锁"><a href="#GCD死锁" class="headerlink" title="GCD死锁"></a>GCD死锁</h3><p>串行队列里面同步一个串行队列就会死锁，解决的方法就是将同步的串行队列放到另外一个线程就能够解决。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)deadLockCase1 &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">	<span class="comment">//主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。</span></span><br><span class="line">	<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase2 &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">	<span class="comment">//3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行</span></span><br><span class="line">	<span class="built_in">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase3 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.starming.gcddemo.serialqueue"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">	<span class="built_in">dispatch_async</span>(serialQueue, ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">			<span class="comment">//串行队列里面同步一个串行队列就会死锁</span></span><br><span class="line">		<span class="built_in">dispatch_sync</span>(serialQueue, ^&#123;</span><br><span class="line">			<span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"4"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"5"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase4 &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">		<span class="comment">//将同步的串行队列放到另外一个线程就能够解决</span></span><br><span class="line">		<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">			<span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"4"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"5"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase5 &#123;</span><br><span class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">		<span class="comment">//回到主线程发现死循环后面就没法执行了</span></span><br><span class="line">		<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">			<span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"4"</span>);</span><br><span class="line">	<span class="comment">//死循环</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="GCD实际使用"><a href="#GCD实际使用" class="headerlink" title="GCD实际使用"></a>GCD实际使用</h3><p>FMDB如何使用 <strong>dispatch_queue_set_specific</strong> 和 <strong>dispatch_get_specific</strong> 来防止死锁，作用类似objc_setAssociatedObject跟objc_getAssociatedObject </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">void</span> * <span class="keyword">const</span> kDispatchQueueSpecificKey = &amp;kDispatchQueueSpecificKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建串行队列，所有数据库的操作都在这个队列里</span></span><br><span class="line">_queue = dispatch_queue_create([[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"fmdb.%@"</span>, <span class="keyword">self</span>] UTF8String],</span><br><span class="line">                               <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//标记队列</span></span><br><span class="line">dispatch_queue_set_specific(_queue, kDispatchQueueSpecificKey, (__bridge <span class="keyword">void</span> *)<span class="keyword">self</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查是否是同一个队列来避免死锁的方法</span></span><br><span class="line">- (<span class="keyword">void</span>)inDatabase:(<span class="keyword">void</span> (^)(FMDatabase *db))block &#123;</span><br><span class="line">	 FMDatabaseQueue *currentSyncQueue = (__bridge <span class="keyword">id</span>)dispatch_get_specific(kDispatchQueueSpecificKey);</span><br><span class="line">	assert(currentSyncQueue != <span class="keyword">self</span> &amp;&amp; <span class="string">"inDatabase: was called reentrantly on the same queue,which would lead to a deadlock"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="iOS系统版本新特性"><a href="#iOS系统版本新特性" class="headerlink" title="iOS系统版本新特性"></a>iOS系统版本新特性</h2><h3 id="iOS8"><a href="#iOS8" class="headerlink" title="iOS8"></a>iOS8</h3><p>iOS8 新加了一个功能叫 Quality of Service(QoS)，里面提供了一下几个更容易理解的枚举名来使用user interactive，user initiated，utility和background。下面的表做了对比 </p>
<table>
<thead>
<tr>
<th align="center">Global queue</th>
<th align="center">Corresponding QoS class</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Main thread</td>
<td align="center">NSQualityOfServiceUserInteractive</td>
<td align="center">UI相关，交互等</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_HIGH</td>
<td align="center">NSQualityOfServiceUserInitiated</td>
<td align="center">用户发起需要马上得到结果进行后续任务</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_DEFAULT</td>
<td align="center">NSQualityOfServiceDefault</td>
<td align="center">默认的不应该使用这个设置任务</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_LOW</td>
<td align="center">NSQualityOfServiceUtility</td>
<td align="center">花费时间稍多比如下载，需要几秒或几分钟的</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_BACKGROUND</td>
<td align="center">NSQualityOfServiceBackground</td>
<td align="center">不可见在后台的操作可能需要好几分钟甚至几小时的</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
</search>
